/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/projects/check-dataset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Check Dataset */
        post: operations["post__check_dataset_projects_check_dataset_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/check-dataset-column": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Check Dataset Column */
        post: operations["check_dataset_column_projects_check_dataset_column_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/dataset_preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get  Dataset Preview */
        post: operations["get__dataset_preview_projects_dataset_preview_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get  Projects */
        get: operations["get__projects_projects__get"];
        put?: never;
        /** Create  Project */
        post: operations["create__project_projects__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get  Project */
        get: operations["get__project_projects__project_id__get"];
        /** Update  Project */
        put: operations["update__project_projects__project_id__put"];
        post?: never;
        /** Delete  Project */
        delete: operations["delete__project_projects__project_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enums": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get  Enums */
        get: operations["get__enums_enums_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/check-filter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Check Filter */
        post: operations["post__check_filter_table__project_id__check_filter_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Get Table */
        post: operations["post__get_table_table__project_id___post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/affected-rows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Get Affected Rows */
        post: operations["post__get_affected_rows_table__project_id__affected_rows_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/column/frequency-distribution": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Get Table Column  Frequency Distribution */
        post: operations["post__get_table_column__frequency_distribution_table__project_id__column_frequency_distribution_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/column/counts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Get Table Column  Counts */
        post: operations["post__get_table_column__counts_table__project_id__column_counts_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/column/values": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Get Table Column */
        post: operations["post__get_table_column_table__project_id__column_values_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/column/geographical": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Get Table Column  Geographical */
        post: operations["post__get_table_column__geographical_table__project_id__column_geographical_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/column/descriptive-statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Get Table Column  Descriptive Statistics */
        post: operations["post__get_table_column__descriptive_statistics_table__project_id__column_descriptive_statistics_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/column/unique": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Get Table Column  Unique */
        post: operations["post__get_table_column__unique_table__project_id__column_unique_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/column/word-frequencies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Get Table Column  Word Frequencies */
        post: operations["post__get_table_column__word_frequencies_table__project_id__column_word_frequencies_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/column/topic-words": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Get Table Column  Topic Words */
        post: operations["post__get_table_column__topic_words_table__project_id__column_topic_words_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/statistic-test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Statistic Test */
        post: operations["post__statistic_test_table__project_id__statistic_test_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/compare-group-words": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Compare Group Words */
        post: operations["post__compare_group_words_table__project_id__compare_group_words_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topic/{project_id}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Start Topic Modeling */
        post: operations["post__start_topic_modeling_topic__project_id__start_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topic/{project_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get  Topic Modeling  Status */
        get: operations["get__topic_modeling__status_topic__project_id__status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topic/{project_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get  All Topic Modeling Results */
        get: operations["get__all_topic_modeling_results_topic__project_id___get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topic/{project_id}/topics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get  All Topics */
        post: operations["get__all_topics_topic__project_id__topics_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topic/{project_id}/refine": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Put  Refine Topics */
        put: operations["put__refine_topics_topic__project_id__refine_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topic/{project_id}/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Documents Per Topic */
        post: operations["post__documents_per_topic_topic__project_id__documents_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AndTableFilter */
        "AndTableFilter-Input": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "and";
            /** Operands */
            operands: (components["schemas"]["AndTableFilter-Input"] | components["schemas"]["OrTableFilter-Input"] | components["schemas"]["NotTableFilter-Input"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IncludesTableFilter"] | components["schemas"]["ExcludesTableFilter"] | components["schemas"]["OnlyTableFilter"])[];
        };
        /** AndTableFilter */
        "AndTableFilter-Output": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "and";
            /** Operands */
            operands: (components["schemas"]["AndTableFilter-Output"] | components["schemas"]["OrTableFilter-Output"] | components["schemas"]["NotTableFilter-Output"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IncludesTableFilter"] | components["schemas"]["ExcludesTableFilter"] | components["schemas"]["OnlyTableFilter"])[];
        };
        /** ApiErrorResult */
        ApiErrorResult: {
            /** Message */
            message: string;
            /** Errors */
            errors?: Record<string, never> | null;
        };
        /** ApiResult[Annotated[Union[AndTableFilter, OrTableFilter, NotTableFilter, EmptyTableFilter, NotEmptyTableFilter, EqualToTableFilter, IsOneOfTableFilter, GreaterThanTableFilter, LessThanTableFilter, GreaterThanOrEqualToTableFilter, LessThanOrEqualToTableFilter, HasTextTableFilter, IncludesTableFilter, ExcludesTableFilter, OnlyTableFilter], FieldInfo(annotation=NoneType, required=True, discriminator='type'), WrapValidator]] */
        ApiResult_Annotated_Union_AndTableFilter__OrTableFilter__NotTableFilter__EmptyTableFilter__NotEmptyTableFilter__EqualToTableFilter__IsOneOfTableFilter__GreaterThanTableFilter__LessThanTableFilter__GreaterThanOrEqualToTableFilter__LessThanOrEqualToTableFilter__HasTextTableFilter__IncludesTableFilter__ExcludesTableFilter__OnlyTableFilter___FieldInfo_annotation_NoneType__required_True__discriminator__type____WrapValidator__: {
            /** Data */
            data: components["schemas"]["AndTableFilter-Output"] | components["schemas"]["OrTableFilter-Output"] | components["schemas"]["NotTableFilter-Output"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IncludesTableFilter"] | components["schemas"]["ExcludesTableFilter"] | components["schemas"]["OnlyTableFilter"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[CheckDatasetResource] */
        ApiResult_CheckDatasetResource_: {
            data: components["schemas"]["CheckDatasetResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[DatasetPreviewResource] */
        ApiResult_DatasetPreviewResource_: {
            data: components["schemas"]["DatasetPreviewResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[InferDatasetColumnResource] */
        ApiResult_InferDatasetColumnResource_: {
            data: components["schemas"]["InferDatasetColumnResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[NoneType] */
        ApiResult_NoneType_: {
            /** Data */
            data: null;
            /** Message */
            message: string | null;
        };
        /** ApiResult[ProjectResource] */
        ApiResult_ProjectResource_: {
            data: components["schemas"]["ProjectResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[TableColumnCountsResource] */
        ApiResult_TableColumnCountsResource_: {
            data: components["schemas"]["TableColumnCountsResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[TableColumnFrequencyDistributionResource] */
        ApiResult_TableColumnFrequencyDistributionResource_: {
            data: components["schemas"]["TableColumnFrequencyDistributionResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[TableColumnGeographicalPointsResource] */
        ApiResult_TableColumnGeographicalPointsResource_: {
            data: components["schemas"]["TableColumnGeographicalPointsResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[TableColumnValuesResource] */
        ApiResult_TableColumnValuesResource_: {
            data: components["schemas"]["TableColumnValuesResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[TableComparisonResult] */
        ApiResult_TableComparisonResult_: {
            data: components["schemas"]["TableComparisonResult"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[TableDescriptiveStatisticsResource] */
        ApiResult_TableDescriptiveStatisticsResource_: {
            data: components["schemas"]["TableDescriptiveStatisticsResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[TableTopicsResource] */
        ApiResult_TableTopicsResource_: {
            data: components["schemas"]["TableTopicsResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[TableWordsResource] */
        ApiResult_TableWordsResource_: {
            data: components["schemas"]["TableWordsResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[TopicModelingResult] */
        ApiResult_TopicModelingResult_: {
            data: components["schemas"]["TopicModelingResult"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[list[ColumnTopicModelingResultResource]] */
        ApiResult_list_ColumnTopicModelingResultResource__: {
            /** Data */
            data: components["schemas"]["ColumnTopicModelingResultResource"][];
            /** Message */
            message: string | null;
        };
        /** ApiResult[list[ProjectResource]] */
        ApiResult_list_ProjectResource__: {
            /** Data */
            data: components["schemas"]["ProjectResource"][];
            /** Message */
            message: string | null;
        };
        /** ApiResult[list[int]] */
        ApiResult_list_int__: {
            /** Data */
            data: number[];
            /** Message */
            message: string | null;
        };
        /** CSVDataSource */
        CSVDataSource: {
            /** Path */
            path: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "csv";
            /**
             * Delimiter
             * @default ,
             */
            delimiter: string;
        };
        /** CategoricalSchemaColumn */
        CategoricalSchemaColumn: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Internal
             * @default false
             */
            internal: boolean;
            /** Source Name */
            source_name?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "categorical";
        };
        /** CheckDatasetColumnSchema */
        CheckDatasetColumnSchema: {
            /** Source */
            source: components["schemas"]["CSVDataSource"] | components["schemas"]["ParquetDataSource"] | components["schemas"]["ExcelDataSource"];
            /** Column */
            column: string;
            dtype: components["schemas"]["SchemaColumnTypeEnum"];
        };
        /** CheckDatasetResource */
        CheckDatasetResource: {
            /** Columns */
            columns: components["schemas"]["InferDatasetColumnResource"][];
        };
        /** CheckDatasetSchema */
        CheckDatasetSchema: components["schemas"]["CSVDataSource"] | components["schemas"]["ParquetDataSource"] | components["schemas"]["ExcelDataSource"];
        /** ColumnTopicModelingResultResource */
        ColumnTopicModelingResultResource: {
            column: components["schemas"]["TextualSchemaColumn-Output"];
            result: components["schemas"]["TopicModelingResult"] | null;
        };
        /** ComparisonGroupWordsSchema */
        ComparisonGroupWordsSchema: {
            /** Groups */
            groups: components["schemas"]["NamedTableFilter"][];
            /** Column */
            column: string;
        };
        /** ComparisonStatisticTestSchema */
        ComparisonStatisticTestSchema: {
            group1: components["schemas"]["NamedTableFilter"];
            group2: components["schemas"]["NamedTableFilter"];
            /** Column */
            column: string;
            statistic_test_preference: components["schemas"]["StatisticTestMethodEnum"];
            effect_size_preference: components["schemas"]["EffectSizeMethodEnum"];
            /** Exclude Overlapping Rows */
            exclude_overlapping_rows: boolean;
        };
        /** Config */
        Config: {
            /**
             * Version
             * @default 1
             */
            version: number;
            /** Project Id */
            project_id: string;
            metadata: components["schemas"]["ProjectMetadata"];
            /** Source */
            source: components["schemas"]["CSVDataSource"] | components["schemas"]["ParquetDataSource"] | components["schemas"]["ExcelDataSource"];
            data_schema: components["schemas"]["SchemaManager-Output"];
        };
        /** ContinuousSchemaColumn */
        ContinuousSchemaColumn: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Internal
             * @default false
             */
            internal: boolean;
            /** Source Name */
            source_name?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "continuous";
            /** Bins */
            bins?: number[] | null;
            /**
             * Bin Count
             * @default 3
             */
            bin_count: number;
        };
        /** DatasetFilterSchema */
        DatasetFilterSchema: {
            /** Filter */
            filter: (components["schemas"]["AndTableFilter-Input"] | components["schemas"]["OrTableFilter-Input"] | components["schemas"]["NotTableFilter-Input"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IncludesTableFilter"] | components["schemas"]["ExcludesTableFilter"] | components["schemas"]["OnlyTableFilter"]) | null;
        };
        /** DatasetPreviewResource */
        DatasetPreviewResource: {
            /** Dataset Columns */
            dataset_columns: string[];
            /** Preview Rows */
            preview_rows: Record<string, never>[];
            /** Total Rows */
            total_rows: number;
        };
        /** DescriptiveStatisticsResource */
        DescriptiveStatisticsResource: {
            /** Count */
            count: number;
            /** Mean */
            mean: number;
            /** Median */
            median: number;
            /** Std */
            std: number;
            /** Min */
            min: number;
            /** Q1 */
            q1: number;
            /** Q3 */
            q3: number;
            /** Max */
            max: number;
            /** Inlier Range */
            inlier_range: [
                number,
                number
            ];
            /** Outlier Count */
            outlier_count: number;
        };
        /**
         * DocumentEmbeddingMethodEnum
         * @enum {string}
         */
        DocumentEmbeddingMethodEnum: "doc2vec" | "all-MiniLM-L6-v2" | "lsa";
        /** DocumentPerTopicResource */
        DocumentPerTopicResource: {
            /** Id */
            id: number;
            /** Original */
            original: string | null;
            /** Preprocessed */
            preprocessed: string | null;
            /** Topic */
            topic: number | null;
        };
        /**
         * DocumentPreprocessingMethodEnum
         * @enum {string}
         */
        DocumentPreprocessingMethodEnum: "en_core_web_sm";
        /** DocumentTopicAssignmentUpdateSchema */
        DocumentTopicAssignmentUpdateSchema: {
            /** Document Id */
            document_id: number;
            /** Topic Id */
            topic_id: number;
        };
        /**
         * EffectSizeMethodEnum
         * @enum {string}
         */
        EffectSizeMethodEnum: "mean-difference" | "median-difference" | "cohen-d" | "rank-biserial-correlation" | "cramer-v";
        /** EffectSizeResult */
        EffectSizeResult: {
            /** Type */
            type: string;
            /** Value */
            value: number;
        };
        /** EmptyTableFilter */
        EmptyTableFilter: {
            /** Target */
            target: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "empty";
        };
        /** EqualToTableFilter */
        EqualToTableFilter: {
            /** Target */
            target: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "equal_to";
            /** Value */
            value: string | number;
        };
        /** ExcelDataSource */
        ExcelDataSource: {
            /** Path */
            path: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "excel";
            /** Sheet Name */
            sheet_name: string | null;
        };
        /** ExcludesTableFilter */
        ExcludesTableFilter: {
            /** Target */
            target: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "excludes";
            /** Values */
            values: string[];
        };
        /**
         * GeospatialRoleEnum
         * @enum {string}
         */
        GeospatialRoleEnum: "latitude" | "longitude";
        /** GeospatialSchemaColumn */
        GeospatialSchemaColumn: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Internal
             * @default false
             */
            internal: boolean;
            /** Source Name */
            source_name?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "geospatial";
            role: components["schemas"]["GeospatialRoleEnum"];
        };
        /** GetTableColumnSchema */
        GetTableColumnSchema: {
            /** Column */
            column: string;
            /** Filter */
            filter: (components["schemas"]["AndTableFilter-Input"] | components["schemas"]["OrTableFilter-Input"] | components["schemas"]["NotTableFilter-Input"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IncludesTableFilter"] | components["schemas"]["ExcludesTableFilter"] | components["schemas"]["OnlyTableFilter"]) | null;
        };
        /** GetTableGeographicalColumnSchema */
        GetTableGeographicalColumnSchema: {
            /** Filter */
            filter: (components["schemas"]["AndTableFilter-Input"] | components["schemas"]["OrTableFilter-Input"] | components["schemas"]["NotTableFilter-Input"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IncludesTableFilter"] | components["schemas"]["ExcludesTableFilter"] | components["schemas"]["OnlyTableFilter"]) | null;
            /** Latitude Column */
            latitude_column: string;
            /** Longitude Column */
            longitude_column: string;
        };
        /** GreaterThanOrEqualToTableFilter */
        GreaterThanOrEqualToTableFilter: {
            /** Target */
            target: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "greater_than_or_equal_to";
            /** Value */
            value: string | number;
        };
        /** GreaterThanTableFilter */
        GreaterThanTableFilter: {
            /** Target */
            target: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "greater_than";
            /** Value */
            value: string | number;
        };
        /** HasTextTableFilter */
        HasTextTableFilter: {
            /** Target */
            target: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "has_text";
            /** Value */
            value: string;
        };
        /** IncludesTableFilter */
        IncludesTableFilter: {
            /** Target */
            target: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "includes";
            /** Values */
            values: string[];
        };
        /** InferDatasetColumnResource */
        InferDatasetColumnResource: {
            /** Name */
            name: string;
            type: components["schemas"]["SchemaColumnTypeEnum"];
            /** Count */
            count: number;
            /** Categories */
            categories: string[] | null;
            descriptive_statistics: components["schemas"]["DescriptiveStatisticsResource"] | null;
        };
        /** IsOneOfTableFilter */
        IsOneOfTableFilter: {
            /** Target */
            target: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "is_one_of";
            /** Values */
            values: (string | number)[];
        };
        /** LessThanOrEqualToTableFilter */
        LessThanOrEqualToTableFilter: {
            /** Target */
            target: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "less_than_or_equal_to";
            /** Value */
            value: string | number;
        };
        /** LessThanTableFilter */
        LessThanTableFilter: {
            /** Target */
            target: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "less_than";
            /** Value */
            value: string | number;
        };
        /** MultiCategoricalSchemaColumn */
        MultiCategoricalSchemaColumn: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Internal
             * @default false
             */
            internal: boolean;
            /** Source Name */
            source_name?: string | null;
            /**
             * Delimiter
             * @default ,
             */
            delimiter: string;
            /**
             * Is Json
             * @default true
             */
            is_json: boolean;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "multi-categorical";
        };
        /** NamedTableFilter */
        NamedTableFilter: {
            /** Name */
            name: string;
            /** Filter */
            filter: components["schemas"]["AndTableFilter-Input"] | components["schemas"]["OrTableFilter-Input"] | components["schemas"]["NotTableFilter-Input"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IncludesTableFilter"] | components["schemas"]["ExcludesTableFilter"] | components["schemas"]["OnlyTableFilter"];
        };
        /** NotEmptyTableFilter */
        NotEmptyTableFilter: {
            /** Target */
            target: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "not_empty";
        };
        /** NotTableFilter */
        "NotTableFilter-Input": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "not";
            /** Operand */
            operand: components["schemas"]["AndTableFilter-Input"] | components["schemas"]["OrTableFilter-Input"] | components["schemas"]["NotTableFilter-Input"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IncludesTableFilter"] | components["schemas"]["ExcludesTableFilter"] | components["schemas"]["OnlyTableFilter"];
        };
        /** NotTableFilter */
        "NotTableFilter-Output": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "not";
            /** Operand */
            operand: components["schemas"]["AndTableFilter-Output"] | components["schemas"]["OrTableFilter-Output"] | components["schemas"]["NotTableFilter-Output"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IncludesTableFilter"] | components["schemas"]["ExcludesTableFilter"] | components["schemas"]["OnlyTableFilter"];
        };
        /** OnlyTableFilter */
        OnlyTableFilter: {
            /** Target */
            target: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "only";
            /** Values */
            values: string[];
        };
        /** OrTableFilter */
        "OrTableFilter-Input": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "or";
            /** Operands */
            operands: (components["schemas"]["AndTableFilter-Input"] | components["schemas"]["OrTableFilter-Input"] | components["schemas"]["NotTableFilter-Input"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IncludesTableFilter"] | components["schemas"]["ExcludesTableFilter"] | components["schemas"]["OnlyTableFilter"])[];
        };
        /** OrTableFilter */
        "OrTableFilter-Output": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "or";
            /** Operands */
            operands: (components["schemas"]["AndTableFilter-Output"] | components["schemas"]["OrTableFilter-Output"] | components["schemas"]["NotTableFilter-Output"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IncludesTableFilter"] | components["schemas"]["ExcludesTableFilter"] | components["schemas"]["OnlyTableFilter"])[];
        };
        /** OrderedCategoricalSchemaColumn */
        OrderedCategoricalSchemaColumn: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Internal
             * @default false
             */
            internal: boolean;
            /** Source Name */
            source_name?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "ordered-categorical";
            /** Category Order */
            category_order?: string[] | null;
        };
        /** PaginationMeta */
        PaginationMeta: {
            /** Pages */
            pages: number;
            /** Total */
            total: number;
        };
        /** PaginationParams */
        PaginationParams: {
            /**
             * Page
             * @default 0
             */
            page: number | null;
            /**
             * Limit
             * @default 15
             */
            limit: number | null;
            /** Filter */
            filter?: (components["schemas"]["AndTableFilter-Input"] | components["schemas"]["OrTableFilter-Input"] | components["schemas"]["NotTableFilter-Input"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IncludesTableFilter"] | components["schemas"]["ExcludesTableFilter"] | components["schemas"]["OnlyTableFilter"]) | null;
            sort?: components["schemas"]["TableSort"] | null;
        };
        /** ParquetDataSource */
        ParquetDataSource: {
            /** Path */
            path: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "parquet";
        };
        /** ProjectMetadata */
        ProjectMetadata: {
            /** Name */
            name: string;
            /** Description */
            description: string | null;
            /** Tags */
            tags: string[];
        };
        /** ProjectMutationSchema */
        ProjectMutationSchema: {
            metadata: components["schemas"]["ProjectMetadata"];
            /** Source */
            source: components["schemas"]["CSVDataSource"] | components["schemas"]["ParquetDataSource"] | components["schemas"]["ExcelDataSource"];
            data_schema: components["schemas"]["SchemaManager-Input"];
        };
        /** ProjectResource */
        ProjectResource: {
            /** Id */
            id: string;
            /** Path */
            path: string;
            config: components["schemas"]["Config"];
        };
        /** RefineTopicsSchema */
        RefineTopicsSchema: {
            /** Topics */
            topics: components["schemas"]["TopicUpdateSchema"][];
            /** Document Topics */
            document_topics: components["schemas"]["DocumentTopicAssignmentUpdateSchema"][];
        };
        /**
         * SchemaColumnTypeEnum
         * @enum {string}
         */
        SchemaColumnTypeEnum: "continuous" | "categorical" | "ordered-categorical" | "multi-categorical" | "temporal" | "textual" | "unique" | "geospatial" | "topic";
        /** SchemaManager */
        "SchemaManager-Input": {
            /** Columns */
            columns: (components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Input"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["MultiCategoricalSchemaColumn"] | components["schemas"]["TopicSchemaColumn"])[];
        };
        /** SchemaManager */
        "SchemaManager-Output": {
            /** Columns */
            columns: (components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["MultiCategoricalSchemaColumn"] | components["schemas"]["TopicSchemaColumn"])[];
        };
        /** SignificanceResult */
        SignificanceResult: {
            /** Type */
            type: string;
            /** Statistic */
            statistic: number;
            /** P Value */
            p_value: number;
        };
        /** StartTopicModelingSchema */
        StartTopicModelingSchema: {
            /** Use Cached Document Vectors */
            use_cached_document_vectors: boolean;
            /** Use Preprocessed Documents */
            use_preprocessed_documents: boolean;
            /** Use Cached Umap Vectors */
            use_cached_umap_vectors: boolean;
        };
        /**
         * StatisticTestMethodEnum
         * @enum {string}
         */
        StatisticTestMethodEnum: "t" | "mann-whitney-u" | "chi-squared";
        /** TableColumnCountsResource */
        TableColumnCountsResource: {
            /** Column */
            column: components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["MultiCategoricalSchemaColumn"] | components["schemas"]["TopicSchemaColumn"];
            /** Total */
            total: number;
            /** Valid */
            valid: number;
            /** Invalid */
            invalid: number;
            /** Outlier */
            outlier: number | null;
        };
        /** TableColumnFrequencyDistributionResource */
        TableColumnFrequencyDistributionResource: {
            /** Column */
            column: components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["MultiCategoricalSchemaColumn"] | components["schemas"]["TopicSchemaColumn"];
            /** Values */
            values: string[];
            /** Frequencies */
            frequencies: number[];
        };
        /** TableColumnGeographicalPointsResource */
        TableColumnGeographicalPointsResource: {
            /** Latitude Column */
            latitude_column: components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["MultiCategoricalSchemaColumn"] | components["schemas"]["TopicSchemaColumn"];
            /** Longitude Column */
            longitude_column: components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["MultiCategoricalSchemaColumn"] | components["schemas"]["TopicSchemaColumn"];
            /** Latitude */
            latitude: number[];
            /** Longitude */
            longitude: number[];
            /** Sizes */
            sizes: number[];
        };
        /** TableColumnValuesResource */
        TableColumnValuesResource: {
            /** Column */
            column: components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["MultiCategoricalSchemaColumn"] | components["schemas"]["TopicSchemaColumn"];
            /** Values */
            values: unknown[];
        };
        /** TableComparisonGroupInfo */
        TableComparisonGroupInfo: {
            /** Name */
            name: string;
            /** Empty Count */
            empty_count: number;
            /** Overlap Count */
            overlap_count: number;
            /** Valid Count */
            valid_count: number;
            /** Total Count */
            total_count: number;
        };
        /** TableComparisonResult */
        TableComparisonResult: {
            /** Warnings */
            warnings: string[];
            /** Groups */
            groups: components["schemas"]["TableComparisonGroupInfo"][];
            significance: components["schemas"]["SignificanceResult"];
            effect_size: components["schemas"]["EffectSizeResult"];
        };
        /** TableDescriptiveStatisticsResource */
        TableDescriptiveStatisticsResource: {
            /** Column */
            column: components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["MultiCategoricalSchemaColumn"] | components["schemas"]["TopicSchemaColumn"];
            statistics: components["schemas"]["DescriptiveStatisticsResource"];
        };
        /** TablePaginationApiResult[DocumentPerTopicResource] */
        TablePaginationApiResult_DocumentPerTopicResource_: {
            /** Data */
            data: components["schemas"]["DocumentPerTopicResource"][];
            /** Message */
            message: string | null;
            /** Columns */
            columns: (components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["MultiCategoricalSchemaColumn"] | components["schemas"]["TopicSchemaColumn"])[];
            meta: components["schemas"]["PaginationMeta"];
        };
        /** TablePaginationApiResult[dict[str, Any]] */
        TablePaginationApiResult_dict_str__Any__: {
            /** Data */
            data: Record<string, never>[];
            /** Message */
            message: string | null;
            /** Columns */
            columns: (components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["MultiCategoricalSchemaColumn"] | components["schemas"]["TopicSchemaColumn"])[];
            meta: components["schemas"]["PaginationMeta"];
        };
        /** TableSort */
        TableSort: {
            /** Name */
            name: string;
            /** Asc */
            asc: boolean;
        };
        /** TableTopicsResource */
        TableTopicsResource: {
            /** Column */
            column: components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["MultiCategoricalSchemaColumn"] | components["schemas"]["TopicSchemaColumn"];
            /** Topics */
            topics: components["schemas"]["Topic"][];
        };
        /** TableWordItemResource */
        TableWordItemResource: {
            /** Group */
            group: number;
            /** Word */
            word: string;
            /** Size */
            size: number;
        };
        /** TableWordsResource */
        TableWordsResource: {
            /** Column */
            column: components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["MultiCategoricalSchemaColumn"] | components["schemas"]["TopicSchemaColumn"];
            /** Words */
            words: components["schemas"]["TableWordItemResource"][];
        };
        /** TaskLog */
        TaskLog: {
            status: components["schemas"]["TaskStatusEnum"];
            /** Message */
            message: string;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp?: string;
        };
        /** TaskResponse[TopicModelingResult] */
        TaskResponse_TopicModelingResult_: {
            /** Id */
            id: string;
            data: components["schemas"]["TopicModelingResult"] | null;
            /** Logs */
            logs: components["schemas"]["TaskLog"][];
            status: components["schemas"]["TaskStatusEnum"];
        };
        /**
         * TaskStatusEnum
         * @enum {string}
         */
        TaskStatusEnum: "idle" | "pending" | "success" | "failed";
        /**
         * TemporalPrecisionEnum
         * @enum {string}
         */
        TemporalPrecisionEnum: "date" | "date-time";
        /** TemporalSchemaColumn */
        TemporalSchemaColumn: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Internal
             * @default false
             */
            internal: boolean;
            /** Source Name */
            source_name?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "temporal";
            /** Datetime Format */
            datetime_format: string | null;
            /** @default date-time */
            temporal_precision: components["schemas"]["TemporalPrecisionEnum"];
        };
        /** TextPreprocessingConfig */
        TextPreprocessingConfig: {
            /** @default en_core_web_sm */
            pipeline_type: components["schemas"]["DocumentPreprocessingMethodEnum"];
            /** Ignore Tokens */
            ignore_tokens?: string[];
            /** Stopwords */
            stopwords?: string[];
            /**
             * Remove Email
             * @default true
             */
            remove_email: boolean;
            /**
             * Remove Url
             * @default true
             */
            remove_url: boolean;
            /**
             * Remove Number
             * @default true
             */
            remove_number: boolean;
            /**
             * Min Df
             * @default 5
             */
            min_df: number;
            /**
             * Max Df
             * @default 0.5
             */
            max_df: number;
            /** Max Unique Words */
            max_unique_words?: number | null;
            /**
             * Min Document Length
             * @default 5
             */
            min_document_length: number;
            /**
             * Min Word Length
             * @default 3
             */
            min_word_length: number;
            /**
             * N Gram Range
             * @default [
             *       1,
             *       2
             *     ]
             */
            n_gram_range: [
                number,
                number
            ];
        };
        /** TextualSchemaColumn */
        "TextualSchemaColumn-Input": {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Internal
             * @default false
             */
            internal: boolean;
            /** Source Name */
            source_name?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "textual";
            preprocessing: components["schemas"]["TextPreprocessingConfig"];
            topic_modeling: components["schemas"]["TopicModelingConfig"];
        };
        /** TextualSchemaColumn */
        "TextualSchemaColumn-Output": {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Internal
             * @default false
             */
            internal: boolean;
            /** Source Name */
            source_name?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "textual";
            preprocessing: components["schemas"]["TextPreprocessingConfig"];
            topic_modeling: components["schemas"]["TopicModelingConfig"];
        };
        /** Topic */
        Topic: {
            /** Id */
            id: number;
            /** Words */
            words: [
                string,
                number
            ][];
            /** Label */
            label: string | null;
            /** Frequency */
            frequency: number;
            /** Description */
            description?: string | null;
            /** Tags */
            tags?: string[] | null;
        };
        /** TopicModelingConfig */
        TopicModelingConfig: {
            /**
             * Min Topic Size
             * @default 15
             */
            min_topic_size: number;
            /** Max Topic Size */
            max_topic_size?: number | null;
            /**
             * Clustering Conservativeness
             * @default 1
             */
            clustering_conservativeness: number;
            /** Reference Document Count */
            reference_document_count?: number | null;
            /** Max Topics */
            max_topics?: number | null;
            /** @default all-MiniLM-L6-v2 */
            embedding_method: components["schemas"]["DocumentEmbeddingMethodEnum"];
            /**
             * Top N Words
             * @default 50
             */
            top_n_words: number;
            /**
             * No Outliers
             * @default false
             */
            no_outliers: boolean;
            /**
             * Represent Outliers
             * @default false
             */
            represent_outliers: boolean;
        };
        /** TopicModelingResult */
        TopicModelingResult: {
            /** Project Id */
            project_id: string;
            /** Topics */
            topics: components["schemas"]["Topic"][];
            /** Valid Count */
            valid_count: number;
            /** Outlier Count */
            outlier_count: number;
            /** Invalid Count */
            invalid_count: number;
            /** Total Count */
            total_count: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
        };
        /** TopicSchemaColumn */
        TopicSchemaColumn: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Internal
             * @default false
             */
            internal: boolean;
            /** Source Name */
            source_name?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "topic";
        };
        /** TopicUpdateSchema */
        TopicUpdateSchema: {
            /** Id */
            id: number;
            /** Label */
            label: string | null;
        };
        /** TopicsOfColumnSchema */
        TopicsOfColumnSchema: {
            /** Filter */
            filter: (components["schemas"]["AndTableFilter-Input"] | components["schemas"]["OrTableFilter-Input"] | components["schemas"]["NotTableFilter-Input"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IncludesTableFilter"] | components["schemas"]["ExcludesTableFilter"] | components["schemas"]["OnlyTableFilter"]) | null;
        };
        /** UniqueSchemaColumn */
        UniqueSchemaColumn: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Internal
             * @default false
             */
            internal: boolean;
            /** Source Name */
            source_name?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "unique";
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    post__check_dataset_projects_check_dataset_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckDatasetSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_CheckDatasetResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    check_dataset_column_projects_check_dataset_column_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckDatasetColumnSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_InferDatasetColumnResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    get__dataset_preview_projects_dataset_preview_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckDatasetSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_DatasetPreviewResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    get__projects_projects__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_list_ProjectResource__"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    create__project_projects__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectMutationSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_ProjectResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    get__project_projects__project_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_ProjectResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    update__project_projects__project_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectMutationSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_ProjectResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    delete__project_projects__project_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_NoneType_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    get__enums_enums_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__check_filter_table__project_id__check_filter_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AndTableFilter-Input"] | components["schemas"]["OrTableFilter-Input"] | components["schemas"]["NotTableFilter-Input"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IncludesTableFilter"] | components["schemas"]["ExcludesTableFilter"] | components["schemas"]["OnlyTableFilter"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_Annotated_Union_AndTableFilter__OrTableFilter__NotTableFilter__EmptyTableFilter__NotEmptyTableFilter__EqualToTableFilter__IsOneOfTableFilter__GreaterThanTableFilter__LessThanTableFilter__GreaterThanOrEqualToTableFilter__LessThanOrEqualToTableFilter__HasTextTableFilter__IncludesTableFilter__ExcludesTableFilter__OnlyTableFilter___FieldInfo_annotation_NoneType__required_True__discriminator__type____WrapValidator__"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__get_table_table__project_id___post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaginationParams"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TablePaginationApiResult_dict_str__Any__"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__get_affected_rows_table__project_id__affected_rows_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DatasetFilterSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_list_int__"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__get_table_column__frequency_distribution_table__project_id__column_frequency_distribution_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetTableColumnSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_TableColumnFrequencyDistributionResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__get_table_column__counts_table__project_id__column_counts_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetTableColumnSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_TableColumnCountsResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__get_table_column_table__project_id__column_values_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetTableColumnSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_TableColumnValuesResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__get_table_column__geographical_table__project_id__column_geographical_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetTableGeographicalColumnSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_TableColumnGeographicalPointsResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__get_table_column__descriptive_statistics_table__project_id__column_descriptive_statistics_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetTableColumnSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_TableDescriptiveStatisticsResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__get_table_column__unique_table__project_id__column_unique_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetTableColumnSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_TableColumnValuesResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__get_table_column__word_frequencies_table__project_id__column_word_frequencies_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetTableColumnSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_TableWordsResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__get_table_column__topic_words_table__project_id__column_topic_words_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetTableColumnSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_TableTopicsResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__statistic_test_table__project_id__statistic_test_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ComparisonStatisticTestSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_TableComparisonResult_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__compare_group_words_table__project_id__compare_group_words_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ComparisonGroupWordsSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_TableTopicsResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__start_topic_modeling_topic__project_id__start_post: {
        parameters: {
            query: {
                column: string;
            };
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StartTopicModelingSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_NoneType_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    get__topic_modeling__status_topic__project_id__status_get: {
        parameters: {
            query: {
                column: string;
            };
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskResponse_TopicModelingResult_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    get__all_topic_modeling_results_topic__project_id___get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_list_ColumnTopicModelingResultResource__"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    get__all_topics_topic__project_id__topics_post: {
        parameters: {
            query: {
                column: string;
            };
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TopicsOfColumnSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_TopicModelingResult_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    put__refine_topics_topic__project_id__refine_put: {
        parameters: {
            query: {
                column: string;
            };
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefineTopicsSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_NoneType_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__documents_per_topic_topic__project_id__documents_post: {
        parameters: {
            query: {
                column: string;
            };
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaginationParams"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TablePaginationApiResult_DocumentPerTopicResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
}
