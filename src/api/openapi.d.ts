/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/projects/check-dataset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Check Dataset */
        post: operations["post__check_dataset_projects_check_dataset_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/check-dataset-column": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Check Dataset Column */
        post: operations["check_dataset_column_projects_check_dataset_column_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/dataset_preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get  Dataset Preview */
        post: operations["get__dataset_preview_projects_dataset_preview_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get  Projects */
        get: operations["get__projects_projects__get"];
        put?: never;
        /** Create  Project */
        post: operations["create__project_projects__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get  Project */
        get: operations["get__project_projects__project_id__get"];
        /** Update  Project */
        put: operations["update__project_projects__project_id__put"];
        post?: never;
        /** Delete  Project */
        delete: operations["delete__project_projects__project_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_id}/reload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reload  Project */
        patch: operations["reload__project_projects__project_id__reload_patch"];
        trace?: never;
    };
    "/enums": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get  Enums */
        get: operations["get__enums_enums_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/check-filter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Check Filter */
        post: operations["post__check_filter_table__project_id__check_filter_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Get Table */
        post: operations["post__get_table_table__project_id___post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/affected-rows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Get Affected Rows */
        post: operations["post__get_affected_rows_table__project_id__affected_rows_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/column/frequency-distribution": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Get Table Column  Frequency Distribution */
        post: operations["post__get_table_column__frequency_distribution_table__project_id__column_frequency_distribution_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/column/aggregate-values": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Get Table Column  Aggregate Values */
        post: operations["post__get_table_column__aggregate_values_table__project_id__column_aggregate_values_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/column/counts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Get Table Column  Counts */
        post: operations["post__get_table_column__counts_table__project_id__column_counts_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/column/values": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Get Table Column */
        post: operations["post__get_table_column_table__project_id__column_values_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/column/paired-values": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Get Table Paired Column */
        post: operations["post__get_table_paired_column_table__project_id__column_paired_values_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/column/geographical": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Get Table Column  Geographical */
        post: operations["post__get_table_column__geographical_table__project_id__column_geographical_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/column/geographical/aggregate-values": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Get Table Column  Geographical  Aggregate Values */
        post: operations["post__get_table_column__geographical__aggregate_values_table__project_id__column_geographical_aggregate_values_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/column/descriptive-statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Get Table Column  Descriptive Statistics */
        post: operations["post__get_table_column__descriptive_statistics_table__project_id__column_descriptive_statistics_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/column/unique": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Get Table Column  Unique */
        post: operations["post__get_table_column__unique_table__project_id__column_unique_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/column/word-frequencies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Get Table Column  Word Frequencies */
        post: operations["post__get_table_column__word_frequencies_table__project_id__column_word_frequencies_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/column/topic-words": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Get Table Column  Topic Words */
        post: operations["post__get_table_column__topic_words_table__project_id__column_topic_words_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{project_id}/compare/words": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Compare Group Words */
        post: operations["post__compare_group_words_table__project_id__compare_words_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topic/{project_id}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Start Topic Modeling */
        post: operations["post__start_topic_modeling_topic__project_id__start_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topic/{project_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get  Topic Modeling  Status */
        get: operations["get__topic_modeling__status_topic__project_id__status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topic/{project_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get  All Topic Modeling Results */
        get: operations["get__all_topic_modeling_results_topic__project_id___get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topic/{project_id}/topics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get  All Topics */
        post: operations["get__all_topics_topic__project_id__topics_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topic/{project_id}/refine": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Put  Refine Topics */
        put: operations["put__refine_topics_topic__project_id__refine_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topic/{project_id}/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Documents Per Topic */
        post: operations["post__documents_per_topic_topic__project_id__documents_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topic/{project_id}/visualization/topics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get  Topic Visualization Results */
        get: operations["get__topic_visualization_results_topic__project_id__visualization_topics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topic/{project_id}/visualization/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get  Document Visualization Results */
        get: operations["get__document_visualization_results_topic__project_id__visualization_documents_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topic/{project_id}/evaluation/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Start Topic Evaluation */
        post: operations["post__start_topic_evaluation_topic__project_id__evaluation_start_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topic/{project_id}/evaluation/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get  Topic Evaluation Status */
        get: operations["get__topic_evaluation_status_topic__project_id__evaluation_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topic/{project_id}/experiment/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Topic Experiment */
        post: operations["post__topic_experiment_topic__project_id__experiment_start_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topic/{project_id}/experiment/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Patch  Cancel Topic Experiment */
        patch: operations["patch__cancel_topic_experiment_topic__project_id__experiment_cancel_patch"];
        trace?: never;
    };
    "/topic/{project_id}/experiment/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get  Topic Experiment Status */
        get: operations["get__topic_experiment_status_topic__project_id__experiment_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topic/{project_id}/apply-topic-model-hyperparameter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get  Apply Topic Model Hyperparameter */
        post: operations["get__apply_topic_model_hyperparameter_topic__project_id__apply_topic_model_hyperparameter_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/userdata/{project_id}/filters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get  All Filters */
        get: operations["get__all_filters_userdata__project_id__filters_get"];
        put?: never;
        /** Post  Filters */
        post: operations["post__filters_userdata__project_id__filters_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/userdata/{project_id}/filters/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get  Filters */
        get: operations["get__filters_userdata__project_id__filters__id__get"];
        /** Put  Filters */
        put: operations["put__filters_userdata__project_id__filters__id__put"];
        post?: never;
        /** Delete  Filters */
        delete: operations["delete__filters_userdata__project_id__filters__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/userdata/{project_id}/comparison-state": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get  All Comparison State */
        get: operations["get__all_comparison_state_userdata__project_id__comparison_state_get"];
        put?: never;
        /** Post  Comparison State */
        post: operations["post__comparison_state_userdata__project_id__comparison_state_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/userdata/{project_id}/comparison-state/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get  Comparison State */
        get: operations["get__comparison_state_userdata__project_id__comparison_state__id__get"];
        /** Put  Comparison State */
        put: operations["put__comparison_state_userdata__project_id__comparison_state__id__put"];
        post?: never;
        /** Delete  Comparison State */
        delete: operations["delete__comparison_state_userdata__project_id__comparison_state__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/userdata/{project_id}/dashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get  All Dashboard */
        get: operations["get__all_dashboard_userdata__project_id__dashboard_get"];
        put?: never;
        /** Post  Dashboard */
        post: operations["post__dashboard_userdata__project_id__dashboard_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/userdata/{project_id}/dashboard/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get  Dashboard */
        get: operations["get__dashboard_userdata__project_id__dashboard__id__get"];
        /** Put  Dashboard */
        put: operations["put__dashboard_userdata__project_id__dashboard__id__put"];
        post?: never;
        /** Delete  Dashboard */
        delete: operations["delete__dashboard_userdata__project_id__dashboard__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/statistic-test/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Statistic Test */
        post: operations["post__statistic_test_statistic_test__project_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/statistic-test/{project_id}/pairwise": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Pairwise Statistic Test */
        post: operations["post__pairwise_statistic_test_statistic_test__project_id__pairwise_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/statistic-test/{project_id}/omnibus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Omnibus Statistic Test */
        post: operations["post__omnibus_statistic_test_statistic_test__project_id__omnibus_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/statistic-test/{project_id}/contingency-table": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Contingency Table */
        post: operations["post__contingency_table_statistic_test__project_id__contingency_table_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/statistic-test/{project_id}/binary-test-distribution": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Test Distribution */
        post: operations["post__test_distribution_statistic_test__project_id__binary_test_distribution_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/statistic-test/{project_id}/binary-test-contingency-table": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Test Contingency Table */
        post: operations["post__test_contingency_table_statistic_test__project_id__binary_test_contingency_table_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/statistic-test/{project_id}/co-occurrence": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Cooccurrence */
        post: operations["post__cooccurrence_statistic_test__project_id__co_occurrence_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/statistic-test/{project_id}/regression/linear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Regression Linear */
        post: operations["post__regression_linear_statistic_test__project_id__regression_linear_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/statistic-test/{project_id}/regression/logistic": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Logistic Regression */
        post: operations["post__logistic_regression_statistic_test__project_id__regression_logistic_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/statistic-test/{project_id}/regression/logistic/multinomial": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Multinomial Logistic Regression */
        post: operations["post__multinomial_logistic_regression_statistic_test__project_id__regression_logistic_multinomial_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/statistic-test/{project_id}/regression/ordinal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post  Ordinal Regression */
        post: operations["post__ordinal_regression_statistic_test__project_id__regression_ordinal_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AndTableFilter */
        "AndTableFilter-Input": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "and";
            /** Operands */
            operands: (components["schemas"]["AndTableFilter-Input"] | components["schemas"]["OrTableFilter-Input"] | components["schemas"]["NotTableFilter-Input"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IsTrueTableFilter"] | components["schemas"]["IsFalseTableFilter"])[];
        };
        /** AndTableFilter */
        "AndTableFilter-Output": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "and";
            /** Operands */
            operands: (components["schemas"]["AndTableFilter-Output"] | components["schemas"]["OrTableFilter-Output"] | components["schemas"]["NotTableFilter-Output"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IsTrueTableFilter"] | components["schemas"]["IsFalseTableFilter"])[];
        };
        /** ApiErrorResult */
        ApiErrorResult: {
            /** Message */
            message: string;
            /** Errors */
            errors?: Record<string, never> | null;
        };
        /** ApiResult[Annotated[Union[AndTableFilter, OrTableFilter, NotTableFilter, EmptyTableFilter, NotEmptyTableFilter, EqualToTableFilter, IsOneOfTableFilter, GreaterThanTableFilter, LessThanTableFilter, GreaterThanOrEqualToTableFilter, LessThanOrEqualToTableFilter, HasTextTableFilter, IsTrueTableFilter, IsFalseTableFilter], FieldInfo(annotation=NoneType, required=True, discriminator='type'), WrapValidator]] */
        ApiResult_Annotated_Union_AndTableFilter__OrTableFilter__NotTableFilter__EmptyTableFilter__NotEmptyTableFilter__EqualToTableFilter__IsOneOfTableFilter__GreaterThanTableFilter__LessThanTableFilter__GreaterThanOrEqualToTableFilter__LessThanOrEqualToTableFilter__HasTextTableFilter__IsTrueTableFilter__IsFalseTableFilter___FieldInfo_annotation_NoneType__required_True__discriminator__type____WrapValidator__: {
            /** Data */
            data: components["schemas"]["AndTableFilter-Output"] | components["schemas"]["OrTableFilter-Output"] | components["schemas"]["NotTableFilter-Output"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IsTrueTableFilter"] | components["schemas"]["IsFalseTableFilter"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[BinaryStatisticTestOnContingencyTableResultMainResource] */
        ApiResult_BinaryStatisticTestOnContingencyTableResultMainResource_: {
            data: components["schemas"]["BinaryStatisticTestOnContingencyTableResultMainResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[BinaryStatisticTestOnDistributionResultResource] */
        ApiResult_BinaryStatisticTestOnDistributionResultResource_: {
            data: components["schemas"]["BinaryStatisticTestOnDistributionResultResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[CheckDatasetResource] */
        ApiResult_CheckDatasetResource_: {
            data: components["schemas"]["CheckDatasetResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[ContingencyTableResource] */
        ApiResult_ContingencyTableResource_: {
            data: components["schemas"]["ContingencyTableResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[DatasetPreviewResource] */
        ApiResult_DatasetPreviewResource_: {
            data: components["schemas"]["DatasetPreviewResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[DocumentTopicsVisualizationResource] */
        ApiResult_DocumentTopicsVisualizationResource_: {
            data: components["schemas"]["DocumentTopicsVisualizationResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[InferDatasetColumnResource] */
        ApiResult_InferDatasetColumnResource_: {
            data: components["schemas"]["InferDatasetColumnResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[LinearRegressionResult] */
        ApiResult_LinearRegressionResult_: {
            data: components["schemas"]["LinearRegressionResult"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[LogisticRegressionResult] */
        ApiResult_LogisticRegressionResult_: {
            data: components["schemas"]["LogisticRegressionResult"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[MultinomialLogisticRegressionResult] */
        ApiResult_MultinomialLogisticRegressionResult_: {
            data: components["schemas"]["MultinomialLogisticRegressionResult"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[NoneType] */
        ApiResult_NoneType_: {
            /** Data */
            data: null;
            /** Message */
            message: string | null;
        };
        /** ApiResult[OrdinalRegressionResult] */
        ApiResult_OrdinalRegressionResult_: {
            data: components["schemas"]["OrdinalRegressionResult"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[PairwiseStatisticTestResultResource] */
        ApiResult_PairwiseStatisticTestResultResource_: {
            data: components["schemas"]["PairwiseStatisticTestResultResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[ProjectResource] */
        ApiResult_ProjectResource_: {
            data: components["schemas"]["ProjectResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[StatisticTestResult] */
        ApiResult_StatisticTestResult_: {
            data: components["schemas"]["StatisticTestResult"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[SubdatasetCooccurrenceResource] */
        ApiResult_SubdatasetCooccurrenceResource_: {
            data: components["schemas"]["SubdatasetCooccurrenceResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[TableColumnAggregateValuesResource] */
        ApiResult_TableColumnAggregateValuesResource_: {
            data: components["schemas"]["TableColumnAggregateValuesResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[TableColumnCountsResource] */
        ApiResult_TableColumnCountsResource_: {
            data: components["schemas"]["TableColumnCountsResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[TableColumnFrequencyDistributionResource] */
        ApiResult_TableColumnFrequencyDistributionResource_: {
            data: components["schemas"]["TableColumnFrequencyDistributionResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[TableColumnGeographicalPointsResource] */
        ApiResult_TableColumnGeographicalPointsResource_: {
            data: components["schemas"]["TableColumnGeographicalPointsResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[TableColumnPairedValuesResource] */
        ApiResult_TableColumnPairedValuesResource_: {
            data: components["schemas"]["TableColumnPairedValuesResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[TableColumnValuesResource] */
        ApiResult_TableColumnValuesResource_: {
            data: components["schemas"]["TableColumnValuesResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[TableDescriptiveStatisticsResource] */
        ApiResult_TableDescriptiveStatisticsResource_: {
            data: components["schemas"]["TableDescriptiveStatisticsResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[TableTopicsResource] */
        ApiResult_TableTopicsResource_: {
            data: components["schemas"]["TableTopicsResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[TableWordFrequenciesResource] */
        ApiResult_TableWordFrequenciesResource_: {
            data: components["schemas"]["TableWordFrequenciesResource"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[TopicModelingResult] */
        ApiResult_TopicModelingResult_: {
            data: components["schemas"]["TopicModelingResult"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[UserDataResource[Annotated[Union[AndTableFilter, OrTableFilter, NotTableFilter, EmptyTableFilter, NotEmptyTableFilter, EqualToTableFilter, IsOneOfTableFilter, GreaterThanTableFilter, LessThanTableFilter, GreaterThanOrEqualToTableFilter, LessThanOrEqualToTableFilter, HasTextTableFilter, IsTrueTableFilter, IsFalseTableFilter], FieldInfo(annotation=NoneType, required=True, discriminator='type'), WrapValidator]]] */
        ApiResult_UserDataResource_Annotated_Union_AndTableFilter__OrTableFilter__NotTableFilter__EmptyTableFilter__NotEmptyTableFilter__EqualToTableFilter__IsOneOfTableFilter__GreaterThanTableFilter__LessThanTableFilter__GreaterThanOrEqualToTableFilter__LessThanOrEqualToTableFilter__HasTextTableFilter__IsTrueTableFilter__IsFalseTableFilter___FieldInfo_annotation_NoneType__required_True__discriminator__type____WrapValidator___: {
            data: components["schemas"]["UserDataResource_Annotated_Union_AndTableFilter__OrTableFilter__NotTableFilter__EmptyTableFilter__NotEmptyTableFilter__EqualToTableFilter__IsOneOfTableFilter__GreaterThanTableFilter__LessThanTableFilter__GreaterThanOrEqualToTableFilter__LessThanOrEqualToTableFilter__HasTextTableFilter__IsTrueTableFilter__IsFalseTableFilter___FieldInfo_annotation_NoneType__required_True__discriminator__type____WrapValidator__"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[UserDataResource[ComparisonState]] */
        ApiResult_UserDataResource_ComparisonState__: {
            data: components["schemas"]["UserDataResource_ComparisonState_"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[UserDataResource[Dashboard]] */
        ApiResult_UserDataResource_Dashboard__: {
            data: components["schemas"]["UserDataResource_Dashboard_"];
            /** Message */
            message: string | null;
        };
        /** ApiResult[list[ColumnTopicModelingResultResource]] */
        ApiResult_list_ColumnTopicModelingResultResource__: {
            /** Data */
            data: components["schemas"]["ColumnTopicModelingResultResource"][];
            /** Message */
            message: string | null;
        };
        /** ApiResult[list[ProjectResource]] */
        ApiResult_list_ProjectResource__: {
            /** Data */
            data: components["schemas"]["ProjectResource"][];
            /** Message */
            message: string | null;
        };
        /** ApiResult[list[TopicVisualizationResource]] */
        ApiResult_list_TopicVisualizationResource__: {
            /** Data */
            data: components["schemas"]["TopicVisualizationResource"][];
            /** Message */
            message: string | null;
        };
        /** ApiResult[list[UserDataResource[Annotated[Union[AndTableFilter, OrTableFilter, NotTableFilter, EmptyTableFilter, NotEmptyTableFilter, EqualToTableFilter, IsOneOfTableFilter, GreaterThanTableFilter, LessThanTableFilter, GreaterThanOrEqualToTableFilter, LessThanOrEqualToTableFilter, HasTextTableFilter, IsTrueTableFilter, IsFalseTableFilter], FieldInfo(annotation=NoneType, required=True, discriminator='type'), WrapValidator]]]] */
        ApiResult_list_UserDataResource_Annotated_Union_AndTableFilter__OrTableFilter__NotTableFilter__EmptyTableFilter__NotEmptyTableFilter__EqualToTableFilter__IsOneOfTableFilter__GreaterThanTableFilter__LessThanTableFilter__GreaterThanOrEqualToTableFilter__LessThanOrEqualToTableFilter__HasTextTableFilter__IsTrueTableFilter__IsFalseTableFilter___FieldInfo_annotation_NoneType__required_True__discriminator__type____WrapValidator____: {
            /** Data */
            data: components["schemas"]["UserDataResource_Annotated_Union_AndTableFilter__OrTableFilter__NotTableFilter__EmptyTableFilter__NotEmptyTableFilter__EqualToTableFilter__IsOneOfTableFilter__GreaterThanTableFilter__LessThanTableFilter__GreaterThanOrEqualToTableFilter__LessThanOrEqualToTableFilter__HasTextTableFilter__IsTrueTableFilter__IsFalseTableFilter___FieldInfo_annotation_NoneType__required_True__discriminator__type____WrapValidator__"][];
            /** Message */
            message: string | null;
        };
        /** ApiResult[list[UserDataResource[ComparisonState]]] */
        ApiResult_list_UserDataResource_ComparisonState___: {
            /** Data */
            data: components["schemas"]["UserDataResource_ComparisonState_"][];
            /** Message */
            message: string | null;
        };
        /** ApiResult[list[UserDataResource[Dashboard]]] */
        ApiResult_list_UserDataResource_Dashboard___: {
            /** Data */
            data: components["schemas"]["UserDataResource_Dashboard_"][];
            /** Message */
            message: string | null;
        };
        /** ApiResult[list[int]] */
        ApiResult_list_int__: {
            /** Data */
            data: number[];
            /** Message */
            message: string | null;
        };
        /** BERTopicExperimentResult */
        BERTopicExperimentResult: {
            constraint: components["schemas"]["BERTopicHyperparameterConstraint"];
            /** Max Trials */
            max_trials: number;
            /** Trials */
            trials: components["schemas"]["BERTopicExperimentTrialResult"][];
            evaluation: components["schemas"]["TopicEvaluationResult"];
            /**
             * Start At
             * Format: date-time
             */
            start_at: string;
            /** End At */
            end_at: string | null;
            /**
             * Last Updated At
             * Format: date-time
             */
            last_updated_at: string;
        };
        /** BERTopicExperimentTrialResult */
        BERTopicExperimentTrialResult: {
            /** Trial Number */
            trial_number: number;
            candidate: components["schemas"]["BERTopicHyperparameterCandidate"];
            evaluation: components["schemas"]["TopicEvaluationResult"] | null;
            /** Error */
            error: string | null;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp?: string;
        };
        /** BERTopicHyperparameterCandidate */
        BERTopicHyperparameterCandidate: {
            /** Min Topic Size */
            min_topic_size: number | null;
            /** Max Topics */
            max_topics: number | null;
            /** Topic Confidence Threshold */
            topic_confidence_threshold: number | null;
        };
        /** BERTopicHyperparameterConstraint */
        BERTopicHyperparameterConstraint: {
            /** Min Topic Size */
            min_topic_size: [
                number,
                number
            ] | null;
            /** Max Topics */
            max_topics: [
                number,
                number
            ] | null;
            /** Topic Confidence Threshold */
            topic_confidence_threshold: [
                number,
                number
            ] | null;
        };
        /** BaseRegressionInput */
        BaseRegressionInput: {
            /** Target */
            target: string;
            /** Groups */
            groups: components["schemas"]["NamedTableFilter"][];
            /** Reference */
            reference: string | null;
            interpretation: components["schemas"]["RegressionInterpretation"];
            /** Constrain By Groups */
            constrain_by_groups: boolean;
        };
        /** BinaryStatisticTestOnContingencyTableResultMainResource */
        BinaryStatisticTestOnContingencyTableResultMainResource: {
            /** Column */
            column: components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["TopicSchemaColumn"] | components["schemas"]["BooleanSchemaColumn"];
            /** Rows */
            rows: string[];
            /** Columns */
            columns: string[];
            /** Results */
            results: components["schemas"]["BinaryStatisticTestOnContingencyTableResultResource"][][];
        };
        /** BinaryStatisticTestOnContingencyTableResultResource */
        BinaryStatisticTestOnContingencyTableResultResource: {
            /** Discriminator1 */
            discriminator1: string;
            /** Discriminator2 */
            discriminator2: string;
            /** Tt */
            TT: number;
            /** Tf */
            TF: number;
            /** Ft */
            FT: number;
            /** Ff */
            FF: number;
            /** Warnings */
            warnings: string[];
            significance: components["schemas"]["SignificanceResult"];
            effect_size: components["schemas"]["EffectSizeResult"];
        };
        /** BinaryStatisticTestOnContingencyTableSchema */
        BinaryStatisticTestOnContingencyTableSchema: {
            /** Groups */
            groups: components["schemas"]["NamedTableFilter"][];
            /** Column */
            column: string;
        };
        /** BinaryStatisticTestOnDistributionResultResource */
        BinaryStatisticTestOnDistributionResultResource: {
            /** Column */
            column: components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["TopicSchemaColumn"] | components["schemas"]["BooleanSchemaColumn"];
            /** Groups */
            groups: string[];
            /** Results */
            results: components["schemas"]["StatisticTestResult"][];
        };
        /** BinaryStatisticTestOnDistributionSchema */
        BinaryStatisticTestOnDistributionSchema: {
            /** Column */
            column: string;
            /** Groups */
            groups: components["schemas"]["NamedTableFilter"][];
            statistic_test_preference: components["schemas"]["StatisticTestMethodEnum"];
            effect_size_preference: components["schemas"]["EffectSizeMethodEnum"];
        };
        /** BooleanSchemaColumn */
        BooleanSchemaColumn: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Internal
             * @default false
             */
            internal: boolean;
            /** Source Name */
            source_name?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "boolean";
        };
        /** CSVDataSource */
        CSVDataSource: {
            /** Path */
            path: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "csv";
            /**
             * Delimiter
             * @default ,
             */
            delimiter: string;
        };
        /** CategoricalSchemaColumn */
        CategoricalSchemaColumn: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Internal
             * @default false
             */
            internal: boolean;
            /** Source Name */
            source_name?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "categorical";
            /**
             * Min Frequency
             * @default 0
             */
            min_frequency: number;
        };
        /** CheckDatasetColumnSchema */
        CheckDatasetColumnSchema: {
            /** Source */
            source: components["schemas"]["CSVDataSource"] | components["schemas"]["ParquetDataSource"] | components["schemas"]["ExcelDataSource"];
            /** Column */
            column: string;
            dtype: components["schemas"]["SchemaColumnTypeEnum"];
        };
        /** CheckDatasetResource */
        CheckDatasetResource: {
            /** Columns */
            columns: components["schemas"]["InferDatasetColumnResource"][];
        };
        /** CheckDatasetSchema */
        CheckDatasetSchema: components["schemas"]["CSVDataSource"] | components["schemas"]["ParquetDataSource"] | components["schemas"]["ExcelDataSource"];
        /** ColumnTopicModelingResultResource */
        ColumnTopicModelingResultResource: {
            column: components["schemas"]["TextualSchemaColumn-Output"];
            result: components["schemas"]["TopicModelingResult"] | null;
        };
        /** CompareSubdatasetsSchema */
        CompareSubdatasetsSchema: {
            /** Groups */
            groups: components["schemas"]["NamedTableFilter"][];
            /** Column */
            column: string;
        };
        /** ComparisonGroupInfo */
        ComparisonGroupInfo: {
            /** Name */
            name: string;
            /** Empty Count */
            empty_count: number;
            /** Valid Count */
            valid_count: number;
            /** Total Count */
            total_count: number;
            /** Overlap Count */
            overlap_count: number;
        };
        /** ComparisonState */
        "ComparisonState-Input": {
            /** Groups */
            groups: components["schemas"]["ComparisonStateItem-Input"][];
        };
        /** ComparisonState */
        "ComparisonState-Output": {
            /** Groups */
            groups: components["schemas"]["ComparisonStateItem-Output"][];
        };
        /** ComparisonStateItem */
        "ComparisonStateItem-Input": {
            /** Name */
            name: string;
            /** Filter */
            filter: components["schemas"]["AndTableFilter-Input"] | components["schemas"]["OrTableFilter-Input"] | components["schemas"]["NotTableFilter-Input"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IsTrueTableFilter"] | components["schemas"]["IsFalseTableFilter"];
        };
        /** ComparisonStateItem */
        "ComparisonStateItem-Output": {
            /** Name */
            name: string;
            /** Filter */
            filter: components["schemas"]["AndTableFilter-Output"] | components["schemas"]["OrTableFilter-Output"] | components["schemas"]["NotTableFilter-Output"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IsTrueTableFilter"] | components["schemas"]["IsFalseTableFilter"];
        };
        /** Config */
        Config: {
            /**
             * Version
             * @default 1
             */
            version: number;
            /** Project Id */
            project_id: string;
            metadata: components["schemas"]["ProjectMetadata"];
            /** Source */
            source: components["schemas"]["CSVDataSource"] | components["schemas"]["ParquetDataSource"] | components["schemas"]["ExcelDataSource"];
            data_schema: components["schemas"]["SchemaManager-Output"];
        };
        /** ContingencyTableResource */
        ContingencyTableResource: {
            /** Column */
            column: components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["TopicSchemaColumn"] | components["schemas"]["BooleanSchemaColumn"];
            /** Rows */
            rows: string[];
            /** Columns */
            columns: string[];
            /** Observed */
            observed: number[][];
            /** Expected */
            expected: number[][];
            /** Residuals */
            residuals: number[][];
            /** Standardized Residuals */
            standardized_residuals: number[][];
        };
        /** ContinuousSchemaColumn */
        ContinuousSchemaColumn: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Internal
             * @default false
             */
            internal: boolean;
            /** Source Name */
            source_name?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "continuous";
            /** Bins */
            bins?: number[] | null;
            /**
             * Bin Count
             * @default 3
             */
            bin_count: number;
        };
        /** Dashboard */
        "Dashboard-Input": {
            /** Items */
            items: components["schemas"]["DashboardItem"][];
        };
        /** Dashboard */
        "Dashboard-Output": {
            /** Items */
            items: components["schemas"]["DashboardItem"][];
        };
        /** DashboardItem */
        DashboardItem: {
            /** Id */
            id: string;
            /** Description */
            description: string | null;
            /** Type */
            type: string;
            /** Column */
            column: string;
            rect: components["schemas"]["DashboardItemRect"];
            /** Config */
            config: Record<string, never>;
        };
        /** DashboardItemRect */
        DashboardItemRect: {
            /** X */
            x: number;
            /** Y */
            y: number;
            /** Width */
            width: number;
            /** Height */
            height: number;
        };
        /** DatasetFilterSchema */
        DatasetFilterSchema: {
            /** Filter */
            filter: (components["schemas"]["AndTableFilter-Input"] | components["schemas"]["OrTableFilter-Input"] | components["schemas"]["NotTableFilter-Input"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IsTrueTableFilter"] | components["schemas"]["IsFalseTableFilter"]) | null;
        };
        /** DatasetPreviewResource */
        DatasetPreviewResource: {
            /** Dataset Columns */
            dataset_columns: string[];
            /** Preview Rows */
            preview_rows: Record<string, never>[];
            /** Total Rows */
            total_rows: number;
        };
        /** DescriptiveStatisticsResource */
        DescriptiveStatisticsResource: {
            /** Count */
            count: number;
            /** Mean */
            mean: number;
            /** Median */
            median: number;
            /** Std */
            std: number;
            /** Min */
            min: number;
            /** Q1 */
            q1: number;
            /** Q3 */
            q3: number;
            /** Max */
            max: number;
            /** Inlier Range */
            inlier_range: [
                number,
                number
            ];
            /** Outlier Count */
            outlier_count: number;
        };
        /**
         * DocumentEmbeddingMethodEnum
         * @enum {string}
         */
        DocumentEmbeddingMethodEnum: "doc2vec" | "all-MiniLM-L6-v2" | "lsa";
        /** DocumentPerTopicResource */
        DocumentPerTopicResource: {
            /** Id */
            id: number;
            /** Original */
            original: string | null;
            /** Preprocessed */
            preprocessed: string | null;
            /** Topic */
            topic: number | null;
        };
        /**
         * DocumentPreprocessingMethodEnum
         * @enum {string}
         */
        DocumentPreprocessingMethodEnum: "en_core_web_sm";
        /** DocumentTopicAssignmentUpdateSchema */
        DocumentTopicAssignmentUpdateSchema: {
            /** Document Id */
            document_id: number;
            /** Topic Id */
            topic_id: number;
        };
        /** DocumentTopicsVisualizationResource */
        DocumentTopicsVisualizationResource: {
            /** Documents */
            documents: components["schemas"]["DocumentVisualizationResource"][];
            /** Topics */
            topics: components["schemas"]["TopicVisualizationResource"][];
        };
        /** DocumentVisualizationResource */
        DocumentVisualizationResource: {
            /** Document */
            document: string;
            /** Topic */
            topic: number;
            /** X */
            x: number;
            /** Y */
            y: number;
        };
        /**
         * EffectSizeMethodEnum
         * @enum {string}
         */
        EffectSizeMethodEnum: "mean-difference" | "median-difference" | "cohen-d" | "rank-biserial-correlation" | "point-biserial-correlation" | "cramer-v";
        /** EffectSizeResult */
        EffectSizeResult: {
            /** Type */
            type: string;
            /** Value */
            value: number;
        };
        /** EmptyTableFilter */
        EmptyTableFilter: {
            /** Target */
            target: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "empty";
        };
        /** EqualToTableFilter */
        EqualToTableFilter: {
            /** Target */
            target: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "equal_to";
            /** Value */
            value: string | number;
        };
        /** ExcelDataSource */
        ExcelDataSource: {
            /** Path */
            path: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "excel";
            /** Sheet Name */
            sheet_name: string | null;
        };
        /**
         * GeospatialRoleEnum
         * @enum {string}
         */
        GeospatialRoleEnum: "latitude" | "longitude";
        /** GeospatialSchemaColumn */
        GeospatialSchemaColumn: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Internal
             * @default false
             */
            internal: boolean;
            /** Source Name */
            source_name?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "geospatial";
            role: components["schemas"]["GeospatialRoleEnum"];
        };
        /** GetContingencyTableSchema */
        GetContingencyTableSchema: {
            /** Groups */
            groups: components["schemas"]["NamedTableFilter"][];
            /** Column */
            column: string;
            /** Exclude Overlapping Rows */
            exclude_overlapping_rows: boolean;
        };
        /** GetSubdatasetCooccurrenceSchema */
        GetSubdatasetCooccurrenceSchema: {
            /** Groups */
            groups: components["schemas"]["NamedTableFilter"][];
        };
        /** GetTableColumnAggregateValuesSchema */
        GetTableColumnAggregateValuesSchema: {
            /** Column */
            column: string;
            /** Filter */
            filter: (components["schemas"]["AndTableFilter-Input"] | components["schemas"]["OrTableFilter-Input"] | components["schemas"]["NotTableFilter-Input"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IsTrueTableFilter"] | components["schemas"]["IsFalseTableFilter"]) | null;
            /** Grouped By */
            grouped_by: string;
            method: components["schemas"]["TableColumnAggregateMethodEnum"];
        };
        /** GetTableColumnSchema */
        GetTableColumnSchema: {
            /** Column */
            column: string;
            /** Filter */
            filter: (components["schemas"]["AndTableFilter-Input"] | components["schemas"]["OrTableFilter-Input"] | components["schemas"]["NotTableFilter-Input"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IsTrueTableFilter"] | components["schemas"]["IsFalseTableFilter"]) | null;
        };
        /** GetTableGeographicalAggregateValuesSchema */
        GetTableGeographicalAggregateValuesSchema: {
            /** Filter */
            filter: (components["schemas"]["AndTableFilter-Input"] | components["schemas"]["OrTableFilter-Input"] | components["schemas"]["NotTableFilter-Input"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IsTrueTableFilter"] | components["schemas"]["IsFalseTableFilter"]) | null;
            /** Latitude Column */
            latitude_column: string;
            /** Longitude Column */
            longitude_column: string;
            /** Target Column */
            target_column: string;
            /** Label Column */
            label_column: string | null;
            method: components["schemas"]["TableColumnAggregateMethodEnum"];
        };
        /** GetTableGeographicalColumnSchema */
        GetTableGeographicalColumnSchema: {
            /** Filter */
            filter: (components["schemas"]["AndTableFilter-Input"] | components["schemas"]["OrTableFilter-Input"] | components["schemas"]["NotTableFilter-Input"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IsTrueTableFilter"] | components["schemas"]["IsFalseTableFilter"]) | null;
            /** Latitude Column */
            latitude_column: string;
            /** Longitude Column */
            longitude_column: string;
            /** Label Column */
            label_column: string | null;
        };
        /** GetTablePairedColumnSchema */
        GetTablePairedColumnSchema: {
            /** Column1 */
            column1: string;
            /** Column2 */
            column2: string;
            /** Filter */
            filter: (components["schemas"]["AndTableFilter-Input"] | components["schemas"]["OrTableFilter-Input"] | components["schemas"]["NotTableFilter-Input"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IsTrueTableFilter"] | components["schemas"]["IsFalseTableFilter"]) | null;
        };
        /** GreaterThanOrEqualToTableFilter */
        GreaterThanOrEqualToTableFilter: {
            /** Target */
            target: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "greater_than_or_equal_to";
            /** Value */
            value: string | number;
        };
        /** GreaterThanTableFilter */
        GreaterThanTableFilter: {
            /** Target */
            target: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "greater_than";
            /** Value */
            value: string | number;
        };
        /** HasTextTableFilter */
        HasTextTableFilter: {
            /** Target */
            target: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "has_text";
            /** Value */
            value: string;
        };
        /** IndividualTopicEvaluationResult */
        IndividualTopicEvaluationResult: {
            topic: components["schemas"]["Topic"];
            coherence: components["schemas"]["TopicCoherenceV"];
        };
        /** InferDatasetColumnResource */
        InferDatasetColumnResource: {
            /** Name */
            name: string;
            type: components["schemas"]["SchemaColumnTypeEnum"];
            /** Count */
            count: number;
            /** Categories */
            categories: string[] | null;
            descriptive_statistics: components["schemas"]["DescriptiveStatisticsResource"] | null;
        };
        /** IsFalseTableFilter */
        IsFalseTableFilter: {
            /** Target */
            target: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "is_false";
        };
        /** IsOneOfTableFilter */
        IsOneOfTableFilter: {
            /** Target */
            target: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "is_one_of";
            /** Values */
            values: (string | number)[];
        };
        /** IsTrueTableFilter */
        IsTrueTableFilter: {
            /** Target */
            target: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "is_true";
        };
        /** LessThanOrEqualToTableFilter */
        LessThanOrEqualToTableFilter: {
            /** Target */
            target: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "less_than_or_equal_to";
            /** Value */
            value: string | number;
        };
        /** LessThanTableFilter */
        LessThanTableFilter: {
            /** Target */
            target: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "less_than";
            /** Value */
            value: string | number;
        };
        /** LinearRegressionInput */
        LinearRegressionInput: {
            /** Target */
            target: string;
            /** Groups */
            groups: components["schemas"]["NamedTableFilter"][];
            /** Reference */
            reference: string | null;
            interpretation: components["schemas"]["RegressionInterpretation"];
            /** Constrain By Groups */
            constrain_by_groups: boolean;
            /** Standardized */
            standardized: boolean;
        };
        /** LinearRegressionResult */
        LinearRegressionResult: {
            /** Reference */
            reference: string | null;
            interpretation: components["schemas"]["RegressionInterpretation"];
            /** Converged */
            converged: boolean;
            /** Sample Size */
            sample_size: number;
            /** Warnings */
            warnings: string[];
            /** Coefficients */
            coefficients: components["schemas"]["RegressionCoefficient"][];
            intercept: components["schemas"]["RegressionCoefficient"] | null;
            /** F Statistic */
            f_statistic: number;
            /** P Value */
            p_value: number;
            /** R Squared */
            r_squared: number;
            /** Standardized */
            standardized: boolean;
            /** Rmse */
            rmse: number;
        };
        /** LogisticRegressionCoefficient */
        LogisticRegressionCoefficient: {
            /** Name */
            name: string;
            /** Value */
            value: number;
            /** P Value */
            p_value: number;
            /** Std Err */
            std_err: number;
            /** Sample Size */
            sample_size: number;
            /** Confidence Interval */
            confidence_interval: [
                number,
                number
            ];
            /** Variance Inflation Factor */
            variance_inflation_factor: number;
            /** Statistic */
            statistic: number;
            /** Odds Ratio */
            readonly odds_ratio: number;
        };
        /** LogisticRegressionInput */
        LogisticRegressionInput: {
            /** Groups */
            groups: components["schemas"]["NamedTableFilter"][];
            target: components["schemas"]["NamedTableFilter"];
            /** Reference */
            reference: string | null;
            interpretation: components["schemas"]["RegressionInterpretation"];
            /** Constrain By Groups */
            constrain_by_groups: boolean;
        };
        /** LogisticRegressionResult */
        LogisticRegressionResult: {
            /** Reference */
            reference: string | null;
            interpretation: components["schemas"]["RegressionInterpretation"];
            /** Converged */
            converged: boolean;
            /** Sample Size */
            sample_size: number;
            /** Warnings */
            warnings: string[];
            /** Coefficients */
            coefficients: components["schemas"]["LogisticRegressionCoefficient"][];
            intercept: components["schemas"]["LogisticRegressionCoefficient"];
            /** P Value */
            p_value: number;
            /** Pseudo R Squared */
            pseudo_r_squared: number;
            /** Log Likelihood Ratio */
            log_likelihood_ratio: number;
        };
        /** MultinomialLogisticRegressionFacetResult */
        MultinomialLogisticRegressionFacetResult: {
            /** Coefficients */
            coefficients: components["schemas"]["LogisticRegressionCoefficient"][];
            intercept: components["schemas"]["LogisticRegressionCoefficient"];
        };
        /** MultinomialLogisticRegressionInput */
        MultinomialLogisticRegressionInput: {
            /** Target */
            target: string;
            /** Groups */
            groups: components["schemas"]["NamedTableFilter"][];
            /** Reference */
            reference: string | null;
            interpretation: components["schemas"]["RegressionInterpretation"];
            /** Constrain By Groups */
            constrain_by_groups: boolean;
            /** Reference Dependent */
            reference_dependent: string | null;
        };
        /** MultinomialLogisticRegressionResult */
        MultinomialLogisticRegressionResult: {
            /** Reference */
            reference: string | null;
            interpretation: components["schemas"]["RegressionInterpretation"];
            /** Converged */
            converged: boolean;
            /** Sample Size */
            sample_size: number;
            /** Warnings */
            warnings: string[];
            /** Facets */
            facets: components["schemas"]["MultinomialLogisticRegressionFacetResult"][];
            /** P Value */
            p_value: number;
            /** Pseudo R Squared */
            pseudo_r_squared: number;
            /** Log Likelihood Ratio */
            log_likelihood_ratio: number;
        };
        /** NamedTableFilter */
        NamedTableFilter: {
            /** Name */
            name: string;
            /** Filter */
            filter: components["schemas"]["AndTableFilter-Input"] | components["schemas"]["OrTableFilter-Input"] | components["schemas"]["NotTableFilter-Input"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IsTrueTableFilter"] | components["schemas"]["IsFalseTableFilter"];
        };
        /** NotEmptyTableFilter */
        NotEmptyTableFilter: {
            /** Target */
            target: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "not_empty";
        };
        /** NotTableFilter */
        "NotTableFilter-Input": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "not";
            /** Operand */
            operand: components["schemas"]["AndTableFilter-Input"] | components["schemas"]["OrTableFilter-Input"] | components["schemas"]["NotTableFilter-Input"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IsTrueTableFilter"] | components["schemas"]["IsFalseTableFilter"];
        };
        /** NotTableFilter */
        "NotTableFilter-Output": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "not";
            /** Operand */
            operand: components["schemas"]["AndTableFilter-Output"] | components["schemas"]["OrTableFilter-Output"] | components["schemas"]["NotTableFilter-Output"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IsTrueTableFilter"] | components["schemas"]["IsFalseTableFilter"];
        };
        /**
         * OmnibusStatisticTestMethodEnum
         * @enum {string}
         */
        OmnibusStatisticTestMethodEnum: "anova" | "kruskal-wallis" | "chi-squared";
        /** OmnibusStatisticTestSchema */
        OmnibusStatisticTestSchema: {
            /** Groups */
            groups: components["schemas"]["NamedTableFilter"][];
            /** Column */
            column: string;
            statistic_test_preference: components["schemas"]["OmnibusStatisticTestMethodEnum"];
            /** Exclude Overlapping Rows */
            exclude_overlapping_rows: boolean;
        };
        /** OrTableFilter */
        "OrTableFilter-Input": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "or";
            /** Operands */
            operands: (components["schemas"]["AndTableFilter-Input"] | components["schemas"]["OrTableFilter-Input"] | components["schemas"]["NotTableFilter-Input"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IsTrueTableFilter"] | components["schemas"]["IsFalseTableFilter"])[];
        };
        /** OrTableFilter */
        "OrTableFilter-Output": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "or";
            /** Operands */
            operands: (components["schemas"]["AndTableFilter-Output"] | components["schemas"]["OrTableFilter-Output"] | components["schemas"]["NotTableFilter-Output"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IsTrueTableFilter"] | components["schemas"]["IsFalseTableFilter"])[];
        };
        /** OrderedCategoricalSchemaColumn */
        OrderedCategoricalSchemaColumn: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Internal
             * @default false
             */
            internal: boolean;
            /** Source Name */
            source_name?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "ordered-categorical";
            /** Category Order */
            category_order?: string[] | null;
            /**
             * Min Frequency
             * @default 0
             */
            min_frequency: number;
        };
        /** OrdinalRegressionCoefficient */
        OrdinalRegressionCoefficient: {
            /** Name */
            name: string;
            /** Value */
            value: number;
            /** P Value */
            p_value: number;
            /** Std Err */
            std_err: number;
            /** Sample Size */
            sample_size: number;
            /** Confidence Interval */
            confidence_interval: [
                number,
                number
            ];
            /** Variance Inflation Factor */
            variance_inflation_factor: number;
            /** Statistic */
            statistic: number;
            /** Odds */
            readonly odds: number;
        };
        /** OrdinalRegressionCutpoint */
        OrdinalRegressionCutpoint: {
            /** Name */
            name: string;
            /** Value */
            value: number;
            /** Std Err */
            std_err: number;
        };
        /** OrdinalRegressionResult */
        OrdinalRegressionResult: {
            /** Reference */
            reference: string | null;
            interpretation: components["schemas"]["RegressionInterpretation"];
            /** Converged */
            converged: boolean;
            /** Sample Size */
            sample_size: number;
            /** Warnings */
            warnings: string[];
            /** Coefficients */
            coefficients: components["schemas"]["OrdinalRegressionCoefficient"][];
            /** Cutpoints */
            cutpoints: components["schemas"]["OrdinalRegressionCutpoint"][];
            /** Log Likelihood Ratio */
            log_likelihood_ratio: number;
        };
        /** PaginationMeta */
        PaginationMeta: {
            /** Pages */
            pages: number;
            /** Total */
            total: number;
        };
        /** PaginationParams */
        PaginationParams: {
            /**
             * Page
             * @default 0
             */
            page: number | null;
            /**
             * Limit
             * @default 15
             */
            limit: number | null;
            /** Filter */
            filter?: (components["schemas"]["AndTableFilter-Input"] | components["schemas"]["OrTableFilter-Input"] | components["schemas"]["NotTableFilter-Input"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IsTrueTableFilter"] | components["schemas"]["IsFalseTableFilter"]) | null;
            sort?: components["schemas"]["TableSort"] | null;
        };
        /** PairwiseStatisticTestResultResource */
        PairwiseStatisticTestResultResource: {
            /** Column */
            column: components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["TopicSchemaColumn"] | components["schemas"]["BooleanSchemaColumn"];
            /** Groups */
            groups: string[];
            /** Results */
            results: components["schemas"]["StatisticTestResult"][];
        };
        /** PairwiseStatisticTestSchema */
        PairwiseStatisticTestSchema: {
            /** Groups */
            groups: components["schemas"]["NamedTableFilter"][];
            /** Column */
            column: string;
            statistic_test_preference: components["schemas"]["StatisticTestMethodEnum"];
            effect_size_preference: components["schemas"]["EffectSizeMethodEnum"];
            /** Exclude Overlapping Rows */
            exclude_overlapping_rows: boolean;
        };
        /** ParquetDataSource */
        ParquetDataSource: {
            /** Path */
            path: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "parquet";
        };
        /** ProjectMetadata */
        ProjectMetadata: {
            /** Name */
            name: string;
            /** Description */
            description: string | null;
            /** Tags */
            tags: string[];
        };
        /** ProjectMutationSchema */
        ProjectMutationSchema: {
            metadata: components["schemas"]["ProjectMetadata"];
            /** Source */
            source: components["schemas"]["CSVDataSource"] | components["schemas"]["ParquetDataSource"] | components["schemas"]["ExcelDataSource"];
            data_schema: components["schemas"]["SchemaManager-Input"];
        };
        /** ProjectResource */
        ProjectResource: {
            /** Id */
            id: string;
            /** Path */
            path: string;
            config: components["schemas"]["Config"];
        };
        /** RefineTopicsSchema */
        RefineTopicsSchema: {
            /** Topics */
            topics: components["schemas"]["TopicUpdateSchema"][];
            /** Document Topics */
            document_topics: components["schemas"]["DocumentTopicAssignmentUpdateSchema"][];
        };
        /** RegressionCoefficient */
        RegressionCoefficient: {
            /** Name */
            name: string;
            /** Value */
            value: number;
            /** P Value */
            p_value: number;
            /** Std Err */
            std_err: number;
            /** Sample Size */
            sample_size: number;
            /** Confidence Interval */
            confidence_interval: [
                number,
                number
            ];
            /** Variance Inflation Factor */
            variance_inflation_factor: number;
            /** Statistic */
            statistic: number;
        };
        /**
         * RegressionInterpretation
         * @enum {string}
         */
        RegressionInterpretation: "grand_mean_deviation" | "relative_to_reference" | "relative_to_baseline";
        /**
         * SchemaColumnTypeEnum
         * @enum {string}
         */
        SchemaColumnTypeEnum: "continuous" | "categorical" | "ordered-categorical" | "temporal" | "textual" | "unique" | "geospatial" | "boolean" | "topic";
        /** SchemaManager */
        "SchemaManager-Input": {
            /** Columns */
            columns: (components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Input"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["TopicSchemaColumn"] | components["schemas"]["BooleanSchemaColumn"])[];
        };
        /** SchemaManager */
        "SchemaManager-Output": {
            /** Columns */
            columns: (components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["TopicSchemaColumn"] | components["schemas"]["BooleanSchemaColumn"])[];
        };
        /** SignificanceResult */
        SignificanceResult: {
            /** Type */
            type: string;
            /** Statistic */
            statistic: number;
            /** P Value */
            p_value: number;
        };
        /** StartTopicModelingSchema */
        StartTopicModelingSchema: {
            /** Use Cached Document Vectors */
            use_cached_document_vectors: boolean;
            /** Use Preprocessed Documents */
            use_preprocessed_documents: boolean;
            /** Use Cached Umap Vectors */
            use_cached_umap_vectors: boolean;
        };
        /**
         * StatisticTestMethodEnum
         * @enum {string}
         */
        StatisticTestMethodEnum: "t" | "mann-whitney-u" | "chi-squared";
        /** StatisticTestResult */
        StatisticTestResult: {
            /** Warnings */
            warnings: string[];
            /** Groups */
            groups: components["schemas"]["ComparisonGroupInfo"][];
            significance: components["schemas"]["SignificanceResult"];
            effect_size: components["schemas"]["EffectSizeResult"];
            /** Sample Size */
            sample_size: number;
        };
        /** StatisticTestSchema */
        StatisticTestSchema: {
            group1: components["schemas"]["NamedTableFilter"];
            group2: components["schemas"]["NamedTableFilter"];
            /** Column */
            column: string;
            statistic_test_preference: components["schemas"]["StatisticTestMethodEnum"];
            effect_size_preference: components["schemas"]["EffectSizeMethodEnum"];
            /** Exclude Overlapping Rows */
            exclude_overlapping_rows: boolean;
        };
        /** SubdatasetCooccurrenceResource */
        SubdatasetCooccurrenceResource: {
            /** Labels */
            labels: string[];
            /** Cooccurrences */
            cooccurrences: number[][];
            /** Frequencies */
            frequencies: number[];
        };
        /**
         * TableColumnAggregateMethodEnum
         * @enum {string}
         */
        TableColumnAggregateMethodEnum: "sum" | "mean" | "median" | "std" | "max" | "min";
        /** TableColumnAggregateValuesResource */
        TableColumnAggregateValuesResource: {
            /** Column */
            column: components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["TopicSchemaColumn"] | components["schemas"]["BooleanSchemaColumn"];
            /** Categories */
            categories: string[];
            /** Values */
            values: number[];
        };
        /** TableColumnCountsResource */
        TableColumnCountsResource: {
            /** Column */
            column: components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["TopicSchemaColumn"] | components["schemas"]["BooleanSchemaColumn"];
            /** Total */
            total: number;
            /** Inside */
            inside: number;
            /** Outside */
            outside: number;
            /** Valid */
            valid: number;
            /** Invalid */
            invalid: number;
            /** Outlier */
            outlier: number | null;
            /** True */
            true: number | null;
            /** False */
            false: number | null;
        };
        /** TableColumnFrequencyDistributionResource */
        TableColumnFrequencyDistributionResource: {
            /** Column */
            column: components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["TopicSchemaColumn"] | components["schemas"]["BooleanSchemaColumn"];
            /** Categories */
            categories: string[];
            /** Frequencies */
            frequencies: number[];
        };
        /** TableColumnGeographicalPointsResource */
        TableColumnGeographicalPointsResource: {
            /** Latitude Column */
            latitude_column: components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["TopicSchemaColumn"] | components["schemas"]["BooleanSchemaColumn"];
            /** Longitude Column */
            longitude_column: components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["TopicSchemaColumn"] | components["schemas"]["BooleanSchemaColumn"];
            /** Latitudes */
            latitudes: number[];
            /** Longitudes */
            longitudes: number[];
            /** Labels */
            labels: string[] | null;
            /** Values */
            values: (number)[];
        };
        /** TableColumnPairedValuesResource */
        TableColumnPairedValuesResource: {
            /** Column1 */
            column1: components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["TopicSchemaColumn"] | components["schemas"]["BooleanSchemaColumn"];
            /** Column2 */
            column2: components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["TopicSchemaColumn"] | components["schemas"]["BooleanSchemaColumn"];
            /** X */
            x: unknown[];
            /** Y */
            y: unknown[];
            /** Frequencies */
            frequencies: number[];
        };
        /** TableColumnValuesResource */
        TableColumnValuesResource: {
            /** Column */
            column: components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["TopicSchemaColumn"] | components["schemas"]["BooleanSchemaColumn"];
            /** Values */
            values: unknown[];
        };
        /** TableDescriptiveStatisticsResource */
        TableDescriptiveStatisticsResource: {
            /** Column */
            column: components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["TopicSchemaColumn"] | components["schemas"]["BooleanSchemaColumn"];
            statistics: components["schemas"]["DescriptiveStatisticsResource"];
        };
        /** TablePaginationApiResult[DocumentPerTopicResource] */
        TablePaginationApiResult_DocumentPerTopicResource_: {
            /** Data */
            data: components["schemas"]["DocumentPerTopicResource"][];
            /** Message */
            message: string | null;
            /** Columns */
            columns: (components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["TopicSchemaColumn"] | components["schemas"]["BooleanSchemaColumn"])[];
            meta: components["schemas"]["PaginationMeta"];
        };
        /** TablePaginationApiResult[dict[str, Any]] */
        TablePaginationApiResult_dict_str__Any__: {
            /** Data */
            data: Record<string, never>[];
            /** Message */
            message: string | null;
            /** Columns */
            columns: (components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["TopicSchemaColumn"] | components["schemas"]["BooleanSchemaColumn"])[];
            meta: components["schemas"]["PaginationMeta"];
        };
        /** TableSort */
        TableSort: {
            /** Name */
            name: string;
            /** Asc */
            asc: boolean;
        };
        /** TableTopicsResource */
        TableTopicsResource: {
            /** Column */
            column: components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["TopicSchemaColumn"] | components["schemas"]["BooleanSchemaColumn"];
            /** Topics */
            topics: components["schemas"]["Topic"][];
        };
        /** TableWordFrequenciesResource */
        TableWordFrequenciesResource: {
            /** Column */
            column: components["schemas"]["UniqueSchemaColumn"] | components["schemas"]["CategoricalSchemaColumn"] | components["schemas"]["OrderedCategoricalSchemaColumn"] | components["schemas"]["TextualSchemaColumn-Output"] | components["schemas"]["ContinuousSchemaColumn"] | components["schemas"]["TemporalSchemaColumn"] | components["schemas"]["GeospatialSchemaColumn"] | components["schemas"]["TopicSchemaColumn"] | components["schemas"]["BooleanSchemaColumn"];
            /** Words */
            words: [
                string,
                number
            ][];
        };
        /** TaskLog */
        TaskLog: {
            status: components["schemas"]["TaskStatusEnum"];
            /** Message */
            message: string;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp?: string;
        };
        /** TaskResponse[BERTopicExperimentResult] */
        TaskResponse_BERTopicExperimentResult_: {
            /** Id */
            id: string;
            data: components["schemas"]["BERTopicExperimentResult"] | null;
            /** Logs */
            logs: components["schemas"]["TaskLog"][];
            status: components["schemas"]["TaskStatusEnum"];
        };
        /** TaskResponse[TopicEvaluationResult] */
        TaskResponse_TopicEvaluationResult_: {
            /** Id */
            id: string;
            data: components["schemas"]["TopicEvaluationResult"] | null;
            /** Logs */
            logs: components["schemas"]["TaskLog"][];
            status: components["schemas"]["TaskStatusEnum"];
        };
        /** TaskResponse[TopicModelingResult] */
        TaskResponse_TopicModelingResult_: {
            /** Id */
            id: string;
            data: components["schemas"]["TopicModelingResult"] | null;
            /** Logs */
            logs: components["schemas"]["TaskLog"][];
            status: components["schemas"]["TaskStatusEnum"];
        };
        /**
         * TaskStatusEnum
         * @enum {string}
         */
        TaskStatusEnum: "idle" | "pending" | "success" | "failed";
        /**
         * TemporalColumnFeatureEnum
         * @enum {string}
         */
        TemporalColumnFeatureEnum: "year" | "month" | "date" | "monthly" | "day_of_week" | "hour";
        /**
         * TemporalPrecisionEnum
         * @enum {string}
         */
        TemporalPrecisionEnum: "year" | "month" | "date";
        /** TemporalSchemaColumn */
        TemporalSchemaColumn: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Internal
             * @default false
             */
            internal: boolean;
            /** Source Name */
            source_name?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "temporal";
            /** Datetime Format */
            datetime_format: string | null;
            /** Temporal Features */
            temporal_features: components["schemas"]["TemporalColumnFeatureEnum"][];
            temporal_precision?: components["schemas"]["TemporalPrecisionEnum"] | null;
        };
        /** TextPreprocessingConfig */
        TextPreprocessingConfig: {
            /** @default en_core_web_sm */
            pipeline_type: components["schemas"]["DocumentPreprocessingMethodEnum"];
            /** Ignore Tokens */
            ignore_tokens?: string[];
            /** Stopwords */
            stopwords?: string[];
            /**
             * Remove Email
             * @default true
             */
            remove_email: boolean;
            /**
             * Remove Url
             * @default true
             */
            remove_url: boolean;
            /**
             * Remove Number
             * @default true
             */
            remove_number: boolean;
            /**
             * Min Df
             * @default 5
             */
            min_df: number;
            /**
             * Max Df
             * @default 0.5
             */
            max_df: number;
            /** Max Unique Words */
            max_unique_words?: number | null;
            /**
             * Min Document Length
             * @default 5
             */
            min_document_length: number;
            /**
             * Min Word Length
             * @default 3
             */
            min_word_length: number;
            /** N Gram Range */
            n_gram_range: [
                number,
                number
            ];
        };
        /** TextualSchemaColumn */
        "TextualSchemaColumn-Input": {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Internal
             * @default false
             */
            internal: boolean;
            /** Source Name */
            source_name?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "textual";
            preprocessing: components["schemas"]["TextPreprocessingConfig"];
            topic_modeling: components["schemas"]["TopicModelingConfig"];
        };
        /** TextualSchemaColumn */
        "TextualSchemaColumn-Output": {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Internal
             * @default false
             */
            internal: boolean;
            /** Source Name */
            source_name?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "textual";
            preprocessing: components["schemas"]["TextPreprocessingConfig"];
            topic_modeling: components["schemas"]["TopicModelingConfig"];
        };
        /** Topic */
        Topic: {
            /** Id */
            id: number;
            /** Words */
            words: [
                string,
                number
            ][];
            /** Label */
            label: string | null;
            /** Frequency */
            frequency: number;
            /** Description */
            description?: string | null;
            /** Tags */
            tags?: string[] | null;
        };
        /** TopicCoherenceV */
        TopicCoherenceV: {
            /** Coherence */
            coherence: number;
            /** Std Dev */
            std_dev: number;
            /** Support */
            support: number;
        };
        /** TopicEvaluationResult */
        TopicEvaluationResult: {
            /** Coherence V */
            coherence_v: number;
            /** Topic Diversity */
            topic_diversity: number;
            /** Topics */
            topics: components["schemas"]["IndividualTopicEvaluationResult"][];
            /** Outlier Count */
            outlier_count: number;
            /** Valid Count */
            valid_count: number;
            /** Total Count */
            total_count: number;
        };
        /** TopicModelExperimentSchema */
        TopicModelExperimentSchema: {
            /** N Trials */
            n_trials: number;
            constraint: components["schemas"]["BERTopicHyperparameterConstraint"];
        };
        /** TopicModelingConfig */
        TopicModelingConfig: {
            /**
             * Min Topic Size
             * @default 15
             */
            min_topic_size: number;
            /** Max Topic Size */
            max_topic_size?: number | null;
            /** Topic Confidence Threshold */
            topic_confidence_threshold?: number | null;
            /**
             * Reference Document Count
             * @default 15
             */
            reference_document_count: number;
            /** Max Topics */
            max_topics?: number | null;
            /** @default all-MiniLM-L6-v2 */
            embedding_method: components["schemas"]["DocumentEmbeddingMethodEnum"];
            /**
             * Top N Words
             * @default 50
             */
            top_n_words: number;
            /**
             * No Outliers
             * @default false
             */
            no_outliers: boolean;
            /**
             * Represent Outliers
             * @default false
             */
            represent_outliers: boolean;
        };
        /** TopicModelingResult */
        TopicModelingResult: {
            /** Project Id */
            project_id: string;
            /** Topics */
            topics: components["schemas"]["Topic"][];
            /** Valid Count */
            valid_count: number;
            /** Outlier Count */
            outlier_count: number;
            /** Invalid Count */
            invalid_count: number;
            /** Total Count */
            total_count: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
        };
        /** TopicSchemaColumn */
        TopicSchemaColumn: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Internal
             * @default false
             */
            internal: boolean;
            /** Source Name */
            source_name?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "topic";
        };
        /** TopicUpdateSchema */
        TopicUpdateSchema: {
            /** Id */
            id: number;
            /** Label */
            label: string | null;
            /** Tags */
            tags: string[] | null;
            /** Description */
            description: string | null;
        };
        /** TopicVisualizationResource */
        TopicVisualizationResource: {
            topic: components["schemas"]["Topic"];
            /** X */
            x: number;
            /** Y */
            y: number;
            /** Frequency */
            frequency: number;
        };
        /** TopicsOfColumnSchema */
        TopicsOfColumnSchema: {
            /** Filter */
            filter: (components["schemas"]["AndTableFilter-Input"] | components["schemas"]["OrTableFilter-Input"] | components["schemas"]["NotTableFilter-Input"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IsTrueTableFilter"] | components["schemas"]["IsFalseTableFilter"]) | null;
        };
        /** UniqueSchemaColumn */
        UniqueSchemaColumn: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Internal
             * @default false
             */
            internal: boolean;
            /** Source Name */
            source_name?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "unique";
        };
        /** UserDataResource[Annotated[Union[AndTableFilter, OrTableFilter, NotTableFilter, EmptyTableFilter, NotEmptyTableFilter, EqualToTableFilter, IsOneOfTableFilter, GreaterThanTableFilter, LessThanTableFilter, GreaterThanOrEqualToTableFilter, LessThanOrEqualToTableFilter, HasTextTableFilter, IsTrueTableFilter, IsFalseTableFilter], FieldInfo(annotation=NoneType, required=True, discriminator='type'), WrapValidator]] */
        UserDataResource_Annotated_Union_AndTableFilter__OrTableFilter__NotTableFilter__EmptyTableFilter__NotEmptyTableFilter__EqualToTableFilter__IsOneOfTableFilter__GreaterThanTableFilter__LessThanTableFilter__GreaterThanOrEqualToTableFilter__LessThanOrEqualToTableFilter__HasTextTableFilter__IsTrueTableFilter__IsFalseTableFilter___FieldInfo_annotation_NoneType__required_True__discriminator__type____WrapValidator__: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Tags */
            tags: string[] | null;
            /** Description */
            description: string | null;
            /** Data */
            data: components["schemas"]["AndTableFilter-Output"] | components["schemas"]["OrTableFilter-Output"] | components["schemas"]["NotTableFilter-Output"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IsTrueTableFilter"] | components["schemas"]["IsFalseTableFilter"];
        };
        /** UserDataResource[ComparisonState] */
        UserDataResource_ComparisonState_: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Tags */
            tags: string[] | null;
            /** Description */
            description: string | null;
            data: components["schemas"]["ComparisonState-Output"];
        };
        /** UserDataResource[Dashboard] */
        UserDataResource_Dashboard_: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Tags */
            tags: string[] | null;
            /** Description */
            description: string | null;
            data: components["schemas"]["Dashboard-Output"];
        };
        /** UserDataSchema[Annotated[Union[AndTableFilter, OrTableFilter, NotTableFilter, EmptyTableFilter, NotEmptyTableFilter, EqualToTableFilter, IsOneOfTableFilter, GreaterThanTableFilter, LessThanTableFilter, GreaterThanOrEqualToTableFilter, LessThanOrEqualToTableFilter, HasTextTableFilter, IsTrueTableFilter, IsFalseTableFilter], FieldInfo(annotation=NoneType, required=True, discriminator='type'), WrapValidator]] */
        UserDataSchema_Annotated_Union_AndTableFilter__OrTableFilter__NotTableFilter__EmptyTableFilter__NotEmptyTableFilter__EqualToTableFilter__IsOneOfTableFilter__GreaterThanTableFilter__LessThanTableFilter__GreaterThanOrEqualToTableFilter__LessThanOrEqualToTableFilter__HasTextTableFilter__IsTrueTableFilter__IsFalseTableFilter___FieldInfo_annotation_NoneType__required_True__discriminator__type____WrapValidator__: {
            /** Name */
            name: string;
            /** Tags */
            tags: string[] | null;
            /** Description */
            description: string | null;
            /** Data */
            data: components["schemas"]["AndTableFilter-Input"] | components["schemas"]["OrTableFilter-Input"] | components["schemas"]["NotTableFilter-Input"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IsTrueTableFilter"] | components["schemas"]["IsFalseTableFilter"];
        };
        /** UserDataSchema[ComparisonState] */
        UserDataSchema_ComparisonState_: {
            /** Name */
            name: string;
            /** Tags */
            tags: string[] | null;
            /** Description */
            description: string | null;
            data: components["schemas"]["ComparisonState-Input"];
        };
        /** UserDataSchema[Dashboard] */
        UserDataSchema_Dashboard_: {
            /** Name */
            name: string;
            /** Tags */
            tags: string[] | null;
            /** Description */
            description: string | null;
            data: components["schemas"]["Dashboard-Input"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    post__check_dataset_projects_check_dataset_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckDatasetSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_CheckDatasetResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    check_dataset_column_projects_check_dataset_column_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckDatasetColumnSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_InferDatasetColumnResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    get__dataset_preview_projects_dataset_preview_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckDatasetSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_DatasetPreviewResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    get__projects_projects__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_list_ProjectResource__"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    create__project_projects__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectMutationSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_ProjectResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    get__project_projects__project_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_ProjectResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    update__project_projects__project_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectMutationSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_ProjectResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    delete__project_projects__project_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_NoneType_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    reload__project_projects__project_id__reload_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_NoneType_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    get__enums_enums_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__check_filter_table__project_id__check_filter_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AndTableFilter-Input"] | components["schemas"]["OrTableFilter-Input"] | components["schemas"]["NotTableFilter-Input"] | components["schemas"]["EmptyTableFilter"] | components["schemas"]["NotEmptyTableFilter"] | components["schemas"]["EqualToTableFilter"] | components["schemas"]["IsOneOfTableFilter"] | components["schemas"]["GreaterThanTableFilter"] | components["schemas"]["LessThanTableFilter"] | components["schemas"]["GreaterThanOrEqualToTableFilter"] | components["schemas"]["LessThanOrEqualToTableFilter"] | components["schemas"]["HasTextTableFilter"] | components["schemas"]["IsTrueTableFilter"] | components["schemas"]["IsFalseTableFilter"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_Annotated_Union_AndTableFilter__OrTableFilter__NotTableFilter__EmptyTableFilter__NotEmptyTableFilter__EqualToTableFilter__IsOneOfTableFilter__GreaterThanTableFilter__LessThanTableFilter__GreaterThanOrEqualToTableFilter__LessThanOrEqualToTableFilter__HasTextTableFilter__IsTrueTableFilter__IsFalseTableFilter___FieldInfo_annotation_NoneType__required_True__discriminator__type____WrapValidator__"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__get_table_table__project_id___post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaginationParams"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TablePaginationApiResult_dict_str__Any__"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__get_affected_rows_table__project_id__affected_rows_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DatasetFilterSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_list_int__"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__get_table_column__frequency_distribution_table__project_id__column_frequency_distribution_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetTableColumnSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_TableColumnFrequencyDistributionResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__get_table_column__aggregate_values_table__project_id__column_aggregate_values_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetTableColumnAggregateValuesSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_TableColumnAggregateValuesResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__get_table_column__counts_table__project_id__column_counts_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetTableColumnSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_TableColumnCountsResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__get_table_column_table__project_id__column_values_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetTableColumnSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_TableColumnValuesResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__get_table_paired_column_table__project_id__column_paired_values_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetTablePairedColumnSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_TableColumnPairedValuesResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__get_table_column__geographical_table__project_id__column_geographical_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetTableGeographicalColumnSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_TableColumnGeographicalPointsResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__get_table_column__geographical__aggregate_values_table__project_id__column_geographical_aggregate_values_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetTableGeographicalAggregateValuesSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_TableColumnGeographicalPointsResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__get_table_column__descriptive_statistics_table__project_id__column_descriptive_statistics_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetTableColumnSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_TableDescriptiveStatisticsResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__get_table_column__unique_table__project_id__column_unique_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetTableColumnSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_TableColumnValuesResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__get_table_column__word_frequencies_table__project_id__column_word_frequencies_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetTableColumnSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_TableWordFrequenciesResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__get_table_column__topic_words_table__project_id__column_topic_words_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetTableColumnSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_TableTopicsResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__compare_group_words_table__project_id__compare_words_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CompareSubdatasetsSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_TableTopicsResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__start_topic_modeling_topic__project_id__start_post: {
        parameters: {
            query: {
                column: string;
            };
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StartTopicModelingSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_NoneType_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    get__topic_modeling__status_topic__project_id__status_get: {
        parameters: {
            query: {
                column: string;
            };
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskResponse_TopicModelingResult_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    get__all_topic_modeling_results_topic__project_id___get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_list_ColumnTopicModelingResultResource__"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    get__all_topics_topic__project_id__topics_post: {
        parameters: {
            query: {
                column: string;
            };
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TopicsOfColumnSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_TopicModelingResult_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    put__refine_topics_topic__project_id__refine_put: {
        parameters: {
            query: {
                column: string;
            };
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefineTopicsSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_NoneType_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__documents_per_topic_topic__project_id__documents_post: {
        parameters: {
            query: {
                column: string;
            };
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaginationParams"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TablePaginationApiResult_DocumentPerTopicResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    get__topic_visualization_results_topic__project_id__visualization_topics_get: {
        parameters: {
            query: {
                column: string;
            };
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_list_TopicVisualizationResource__"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    get__document_visualization_results_topic__project_id__visualization_documents_get: {
        parameters: {
            query: {
                column: string;
            };
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_DocumentTopicsVisualizationResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__start_topic_evaluation_topic__project_id__evaluation_start_post: {
        parameters: {
            query: {
                column: string;
            };
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_NoneType_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    get__topic_evaluation_status_topic__project_id__evaluation_status_get: {
        parameters: {
            query: {
                column: string;
            };
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskResponse_TopicEvaluationResult_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__topic_experiment_topic__project_id__experiment_start_post: {
        parameters: {
            query: {
                column: string;
            };
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TopicModelExperimentSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_NoneType_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    patch__cancel_topic_experiment_topic__project_id__experiment_cancel_patch: {
        parameters: {
            query: {
                column: string;
            };
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_NoneType_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    get__topic_experiment_status_topic__project_id__experiment_status_get: {
        parameters: {
            query: {
                column: string;
            };
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskResponse_BERTopicExperimentResult_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    get__apply_topic_model_hyperparameter_topic__project_id__apply_topic_model_hyperparameter_post: {
        parameters: {
            query: {
                column: string;
            };
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BERTopicHyperparameterCandidate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_NoneType_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    get__all_filters_userdata__project_id__filters_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_list_UserDataResource_Annotated_Union_AndTableFilter__OrTableFilter__NotTableFilter__EmptyTableFilter__NotEmptyTableFilter__EqualToTableFilter__IsOneOfTableFilter__GreaterThanTableFilter__LessThanTableFilter__GreaterThanOrEqualToTableFilter__LessThanOrEqualToTableFilter__HasTextTableFilter__IsTrueTableFilter__IsFalseTableFilter___FieldInfo_annotation_NoneType__required_True__discriminator__type____WrapValidator____"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__filters_userdata__project_id__filters_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserDataSchema_Annotated_Union_AndTableFilter__OrTableFilter__NotTableFilter__EmptyTableFilter__NotEmptyTableFilter__EqualToTableFilter__IsOneOfTableFilter__GreaterThanTableFilter__LessThanTableFilter__GreaterThanOrEqualToTableFilter__LessThanOrEqualToTableFilter__HasTextTableFilter__IsTrueTableFilter__IsFalseTableFilter___FieldInfo_annotation_NoneType__required_True__discriminator__type____WrapValidator__"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_NoneType_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    get__filters_userdata__project_id__filters__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_UserDataResource_Annotated_Union_AndTableFilter__OrTableFilter__NotTableFilter__EmptyTableFilter__NotEmptyTableFilter__EqualToTableFilter__IsOneOfTableFilter__GreaterThanTableFilter__LessThanTableFilter__GreaterThanOrEqualToTableFilter__LessThanOrEqualToTableFilter__HasTextTableFilter__IsTrueTableFilter__IsFalseTableFilter___FieldInfo_annotation_NoneType__required_True__discriminator__type____WrapValidator___"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    put__filters_userdata__project_id__filters__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserDataSchema_Annotated_Union_AndTableFilter__OrTableFilter__NotTableFilter__EmptyTableFilter__NotEmptyTableFilter__EqualToTableFilter__IsOneOfTableFilter__GreaterThanTableFilter__LessThanTableFilter__GreaterThanOrEqualToTableFilter__LessThanOrEqualToTableFilter__HasTextTableFilter__IsTrueTableFilter__IsFalseTableFilter___FieldInfo_annotation_NoneType__required_True__discriminator__type____WrapValidator__"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_NoneType_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    delete__filters_userdata__project_id__filters__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_NoneType_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    get__all_comparison_state_userdata__project_id__comparison_state_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_list_UserDataResource_ComparisonState___"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__comparison_state_userdata__project_id__comparison_state_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserDataSchema_ComparisonState_"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_NoneType_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    get__comparison_state_userdata__project_id__comparison_state__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_UserDataResource_ComparisonState__"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    put__comparison_state_userdata__project_id__comparison_state__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserDataSchema_ComparisonState_"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_NoneType_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    delete__comparison_state_userdata__project_id__comparison_state__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_NoneType_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    get__all_dashboard_userdata__project_id__dashboard_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_list_UserDataResource_Dashboard___"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__dashboard_userdata__project_id__dashboard_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserDataSchema_Dashboard_"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_NoneType_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    get__dashboard_userdata__project_id__dashboard__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_UserDataResource_Dashboard__"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    put__dashboard_userdata__project_id__dashboard__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserDataSchema_Dashboard_"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_NoneType_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    delete__dashboard_userdata__project_id__dashboard__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_NoneType_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__statistic_test_statistic_test__project_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StatisticTestSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_StatisticTestResult_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__pairwise_statistic_test_statistic_test__project_id__pairwise_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PairwiseStatisticTestSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_PairwiseStatisticTestResultResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__omnibus_statistic_test_statistic_test__project_id__omnibus_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OmnibusStatisticTestSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_StatisticTestResult_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__contingency_table_statistic_test__project_id__contingency_table_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetContingencyTableSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_ContingencyTableResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__test_distribution_statistic_test__project_id__binary_test_distribution_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BinaryStatisticTestOnDistributionSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_BinaryStatisticTestOnDistributionResultResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__test_contingency_table_statistic_test__project_id__binary_test_contingency_table_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BinaryStatisticTestOnContingencyTableSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_BinaryStatisticTestOnContingencyTableResultMainResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__cooccurrence_statistic_test__project_id__co_occurrence_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetSubdatasetCooccurrenceSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_SubdatasetCooccurrenceResource_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__regression_linear_statistic_test__project_id__regression_linear_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LinearRegressionInput"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_LinearRegressionResult_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__logistic_regression_statistic_test__project_id__regression_logistic_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LogisticRegressionInput"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_LogisticRegressionResult_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__multinomial_logistic_regression_statistic_test__project_id__regression_logistic_multinomial_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MultinomialLogisticRegressionInput"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_MultinomialLogisticRegressionResult_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
    post__ordinal_regression_statistic_test__project_id__regression_ordinal_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BaseRegressionInput"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResult_OrdinalRegressionResult_"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResult"];
                };
            };
        };
    };
}
